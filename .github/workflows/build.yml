# .github/workflows/build.yml
name: Build Executables

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13          # Intel Mac
            name: macos-intel
            arch: x86_64
          - os: macos-14          # Apple Silicon Mac (M1/M2)
            name: macos-apple-silicon
            arch: arm64
          - os: ubuntu-latest
            name: linux
            arch: x86_64
          - os: windows-latest
            name: windows
            arch: x86_64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable (macOS/Linux)
      if: runner.os != 'Windows'
      run: |
        python -m PyInstaller \
          --onefile \
          --name=talk-to-metabase-${{ matrix.name }} \
          --clean \
          --noconfirm \
          --add-data=talk_to_metabase/schemas:talk_to_metabase/schemas \
          --hidden-import=talk_to_metabase \
          --hidden-import=talk_to_metabase.tools \
          --hidden-import=talk_to_metabase.tools.dashboard \
          --hidden-import=talk_to_metabase.tools.card \
          --hidden-import=talk_to_metabase.tools.collection \
          --hidden-import=talk_to_metabase.tools.database \
          --hidden-import=talk_to_metabase.tools.search \
          --hidden-import=talk_to_metabase.tools.context \
          --console \
          metabase_mcp.py

    - name: Build executable (Windows)
      if: runner.os == 'Windows'
      run: |
        python -m PyInstaller `
          --onefile `
          --name=talk-to-metabase-${{ matrix.name }} `
          --clean `
          --noconfirm `
          --add-data="talk_to_metabase/schemas;talk_to_metabase/schemas" `
          --hidden-import=talk_to_metabase `
          --hidden-import=talk_to_metabase.tools `
          --hidden-import=talk_to_metabase.tools.dashboard `
          --hidden-import=talk_to_metabase.tools.card `
          --hidden-import=talk_to_metabase.tools.collection `
          --hidden-import=talk_to_metabase.tools.database `
          --hidden-import=talk_to_metabase.tools.search `
          --hidden-import=talk_to_metabase.tools.context `
          --console `
          metabase_mcp.py

    - name: Verify executable (macOS/Linux)
      if: runner.os != 'Windows'
      run: |
        ls -la dist/
        file dist/talk-to-metabase-${{ matrix.name }} || true
        # Test architecture on macOS
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          lipo -archs dist/talk-to-metabase-${{ matrix.name }} || true
        fi
        # Quick test that it starts
        timeout 10s ./dist/talk-to-metabase-${{ matrix.name }} --help || echo "Test completed (timeout expected)"

    - name: Verify executable (Windows)
      if: runner.os == 'Windows'
      run: |
        Get-ChildItem dist/
        # Quick test that it starts  
        try {
          $process = Start-Process -FilePath "dist/talk-to-metabase-${{ matrix.name }}.exe" -ArgumentList "--help" -PassThru -WindowStyle Hidden
          Start-Sleep -Seconds 5
          if (!$process.HasExited) {
            $process.Kill()
            Write-Host "Executable started successfully (killed after 5s)"
          }
        } catch {
          Write-Host "Could not test executable: $_"
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: talk-to-metabase-${{ matrix.name }}
        path: |
          dist/talk-to-metabase-${{ matrix.name }}*
        retention-days: 30

  # Create a release when a tag is pushed
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: |
        ls -la artifacts/
        find artifacts -type f -name "talk-to-metabase-*" -exec ls -la {} \;

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*/talk-to-metabase-*
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## Talk to Metabase MCP Server
          
          **Installation Instructions:**
          
          1. Download the appropriate executable for your platform:
             - `talk-to-metabase-macos-intel` - Intel Mac (x86_64)
             - `talk-to-metabase-macos-apple-silicon` - Apple Silicon Mac (M1/M2/M3)
             - `talk-to-metabase-linux` - Linux (x86_64)
             - `talk-to-metabase-windows.exe` - Windows (x86_64)
          
          2. Make the file executable (macOS/Linux): `chmod +x talk-to-metabase-*`
          
          3. Add to your Claude Desktop configuration:
          ```json
          {
            "mcpServers": {
              "Talk to Metabase": {
                "command": "/path/to/talk-to-metabase-[platform]",
                "args": [],
                "env": {
                  "METABASE_URL": "https://your-metabase.com",
                  "METABASE_USERNAME": "your-username",
                  "METABASE_PASSWORD": "your-password",
                  "METABASE_CONTEXT_AUTO_INJECT": "true"
                }
              }
            }
          }
          ```
          
          4. Restart Claude Desktop and start chatting with your Metabase data!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
