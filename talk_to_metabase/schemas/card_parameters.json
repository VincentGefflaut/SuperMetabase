{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Metabase Card Parameters Schema",
  "description": "JSON schema for the 'parameters' argument of POST /api/card and PUT /api/card/{id} endpoints\n\nIMPORTANT: Parameters are primarily auto-generated by Metabase from template tags in native SQL queries. While you can include this field in API requests, Metabase will typically regenerate parameters automatically based on the dataset_query.native.template-tags content.\n\nFor native SQL queries, template tags like {{variable_name}} automatically create corresponding parameters. The parameter types and targets are determined by the template tag configuration set in the query editor UI.\n\nFIELD FILTERS: This schema supports creating field filter parameters by:\n1. Using field filter parameter types (string/=, number/between, date/range, etc.)\n2. Setting appropriate dimension targets that reference database fields or template tags\n3. The field reference format follows MBQL structure: ['field', field-id, options]\n4. Field filter parameters can be used in both native queries (via template tags) and structured queries (via field references)",
  "type": "array",
  "items": {
    "type": "object",
    "required": ["name", "type"],
    "properties": {
      "id": {
        "type": "string",
        "minLength": 1,
        "description": "Unique identifier for the parameter. Must be a non-blank string."
      },
      "type": {
        "type": "string",
        "description": "The parameter type determining the UI widget and behavior. Generated automatically based on template tag type and field characteristics.",
        "anyOf": [
          {
            "enum": [
              "category",
              "number/=", 
              "date/single",
              "string/=",
              "string/!=",
              "string/contains",
              "string/does-not-contain",
              "string/starts-with",
              "string/ends-with",
              "number/!=",
              "number/between",
              "number/>=",
              "number/<=",
              "date/range",
              "date/relative",
              "date/month-year",
              "date/quarter-year",
              "date/all-options",
              "boolean/=",
              "id",
              "temporal-unit"
            ],
            "description": "Standard parameter types:\n- category: From 'text' template tags or field filters on fields with predefined values\n- number/*: From 'number' template tags or field filters on numeric fields\n- date/*: From 'date' template tags or field filters on date/time fields\n- string/*: From field filters on text fields\n- boolean/=: From field filters on boolean fields\n- id: From field filters on ID/primary key fields\n- temporal-unit: From field filters on date fields that support temporal bucketing"
          },
          {
            "type": "string",
            "pattern": "^(location|address)/",
            "description": "Location parameter types from field filters on address fields"
          }
        ]
      },
      "name": {
        "type": "string",
        "description": "Human-readable name for the parameter displayed in the UI."
      },
      "slug": {
        "type": "string",
        "description": "URL-friendly identifier for the parameter."
      },
      "target": {
        "description": "Specifies what the parameter targets - either a template tag variable or dimension field",
        "oneOf": [
          {
            "type": "array",
            "items": [
              {
                "const": "variable"
              },
              {
                "type": "array",
                "items": [
                  {
                    "const": "template-tag"
                  },
                  {
                    "type": "string",
                    "description": "Name of the template tag"
                  }
                ],
                "minItems": 2,
                "maxItems": 2
              }
            ],
            "minItems": 2,
            "maxItems": 2,
            "description": "Variable target - links to a template tag variable like {{limit}}"
          },
          {
            "type": "array",
            "items": [
              {
                "const": "dimension"
              },
              {
                "type": "array",
                "items": [
                  {
                    "const": "template-tag"
                  },
                  {
                    "type": "string",
                    "description": "Name of the template tag"
                  }
                ],
                "minItems": 2,
                "maxItems": 2
              },
              {
                "type": "object",
                "properties": {
                  "stage-number": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "additionalProperties": false,
                "description": "Optional dimension target options"
              }
            ],
            "minItems": 2,
            "maxItems": 3,
            "description": "Dimension target for native queries - links to field filter template tags"
          },
          {
            "type": "array",
            "items": [
              {
                "const": "dimension"
              },
              {
                "description": "Field reference for structured queries",
                "oneOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "const": "field"
                      },
                      {
                        "anyOf": [
                          {
                            "type": "integer",
                            "minimum": 1,
                            "description": "Field ID"
                          },
                          {
                            "type": "string",
                            "description": "Field name for field literals"
                          }
                        ]
                      },
                      {
                        "anyOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "object",
                            "description": "Field reference options",
                            "properties": {
                              "source-field": {
                                "anyOf": [
                                  {
                                    "type": "integer",
                                    "minimum": 1
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "description": "Source field for foreign key references"
                              },
                              "join-alias": {
                                "type": "string",
                                "description": "Join alias for joined field references"
                              },
                              "temporal-unit": {
                                "type": "string",
                                "enum": [
                                  "default",
                                  "minute",
                                  "hour", 
                                  "day",
                                  "week",
                                  "month",
                                  "quarter",
                                  "year",
                                  "minute-of-hour",
                                  "hour-of-day",
                                  "day-of-week",
                                  "day-of-month",
                                  "day-of-year",
                                  "week-of-year",
                                  "month-of-year",
                                  "quarter-of-year"
                                ],
                                "description": "Temporal unit for datetime fields"
                              },
                              "binning": {
                                "type": "object",
                                "description": "Binning options for numeric fields",
                                "properties": {
                                  "strategy": {
                                    "type": "string",
                                    "enum": ["default", "num-bins", "bin-width"]
                                  },
                                  "num-bins": {
                                    "type": "integer",
                                    "minimum": 1
                                  },
                                  "bin-width": {
                                    "type": "number",
                                    "exclusiveMinimum": 0
                                  }
                                },
                                "required": ["strategy"],
                                "additionalProperties": false
                              },
                              "base-type": {
                                "type": "string",
                                "description": "Base type for field literals"
                              }
                            },
                            "additionalProperties": false
                          }
                        ]
                      }
                    ],
                    "minItems": 3,
                    "maxItems": 3,
                    "description": "Field reference: ['field', field-id-or-name, options]"
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "const": "expression"
                      },
                      {
                        "type": "string",
                        "description": "Expression name"
                      },
                      {
                        "anyOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "object",
                            "description": "Expression reference options"
                          }
                        ]
                      }
                    ],
                    "minItems": 2,
                    "maxItems": 3,
                    "description": "Expression reference: ['expression', name, options]"
                  }
                ]
              },
              {
                "type": "object",
                "properties": {
                  "stage-number": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "additionalProperties": false,
                "description": "Optional dimension target options"
              }
            ],
            "minItems": 2,
            "maxItems": 3,
            "description": "Dimension target for structured queries - links to database fields"
          },
          {
            "type": "array",
            "items": [
              {
                "const": "text-tag"
              },
              {
                "type": "string",
                "description": "Name of the text tag"
              }
            ],
            "minItems": 2,
            "maxItems": 2,
            "description": "Text target - for text replacement in native queries"
          }
        ]
      },
      "default": {
        "description": "Default value for the parameter. Type and format depends on parameter type.",
        "anyOf": [
          {
            "description": "Default value for number parameters",
            "if": {
              "properties": {
                "type": {
                  "pattern": "^number"
                }
              }
            },
            "then": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string",
                  "pattern": "^-?\\d+(\\.\\d+)?$",
                  "description": "Numeric string representation"
                },
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string",
                        "pattern": "^-?\\d+(\\.\\d+)?$"
                      }
                    ]
                  },
                  "description": "Array of numbers for multi-value number parameters"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          {
            "description": "Default value for string parameters",
            "if": {
              "properties": {
                "type": {
                  "pattern": "^string"
                }
              }
            },
            "then": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Array of strings for multi-value string parameters"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          {
            "description": "Default value for date parameters",
            "if": {
              "properties": {
                "type": {
                  "pattern": "^date"
                }
              }
            },
            "then": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                  "description": "ISO date format YYYY-MM-DD for single dates"
                },
                {
                  "type": "string",
                  "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
                  "description": "ISO datetime format for dates with time"
                },
                {
                  "type": "string",
                  "pattern": "^\\d{4}-\\d{2}-\\d{2}~\\d{4}-\\d{2}-\\d{2}$",
                  "description": "Date range format YYYY-MM-DD~YYYY-MM-DD"
                },
                {
                  "type": "string",
                  "pattern": "^\\d{4}-\\d{2}$",
                  "description": "Month format YYYY-MM"
                },
                {
                  "type": "string",
                  "pattern": "^Q[1-4]-\\d{4}$",
                  "description": "Quarter format Q1-YYYY through Q4-YYYY"
                },
                {
                  "type": "string",
                  "pattern": "^~\\d{4}-\\d{2}-\\d{2}$",
                  "description": "Before date format ~YYYY-MM-DD"
                },
                {
                  "type": "string",
                  "pattern": "^\\d{4}-\\d{2}-\\d{2}~$",
                  "description": "After date format YYYY-MM-DD~"
                },
                {
                  "type": "string",
                  "enum": ["today", "yesterday"],
                  "description": "Relative date keywords"
                },
                {
                  "type": "string",
                  "pattern": "^this(day|week|month|quarter|year)$",
                  "description": "Current period relative dates"
                },
                {
                  "type": "string",
                  "pattern": "^previous(day|week|month|quarter|year)$",
                  "description": "Previous period relative dates"
                },
                {
                  "type": "string",
                  "pattern": "^past\\d+(day|week|month|quarter|year)s~?$",
                  "description": "Past N periods, optional ~ for includeCurrent"
                },
                {
                  "type": "string",
                  "pattern": "^next\\d+(day|week|month|quarter|year)s~?$",
                  "description": "Next N periods, optional ~ for includeCurrent"
                },
                {
                  "type": "string",
                  "pattern": "^past\\d+(day|week|month|quarter|year)s-from-\\d+(day|week|month|quarter|year)s$",
                  "description": "Past N periods from M periods ago"
                },
                {
                  "type": "string",
                  "pattern": "^next\\d+(day|week|month|quarter|year)s-from-\\d+(day|week|month|quarter|year)s$",
                  "description": "Next N periods from M periods ahead"
                },
                {
                  "type": "string",
                  "pattern": "^exclude-hours-([0-9]|1[0-9]|2[0-3])(-([0-9]|1[0-9]|2[0-3]))*$",
                  "description": "Exclude specific hours (0-23)"
                },
                {
                  "type": "string",
                  "pattern": "^exclude-days-(Mon|Tue|Wed|Thu|Fri|Sat|Sun)(-(Mon|Tue|Wed|Thu|Fri|Sat|Sun))*$",
                  "description": "Exclude specific days of week"
                },
                {
                  "type": "string",
                  "pattern": "^exclude-months-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)(-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))*$",
                  "description": "Exclude specific months"
                },
                {
                  "type": "string",
                  "pattern": "^exclude-quarters-[1-4](-[1-4])*$",
                  "description": "Exclude specific quarters (1-4)"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          {
            "description": "Default value for boolean parameters",
            "if": {
              "properties": {
                "type": {
                  "pattern": "^boolean"
                }
              }
            },
            "then": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "enum": ["true", "false"],
                  "description": "String representation of boolean"
                },
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "enum": ["true", "false"]
                      }
                    ]
                  },
                  "description": "Array of booleans for multi-value boolean parameters"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          {
            "description": "Default value for temporal-unit parameters",
            "if": {
              "properties": {
                "type": {
                  "const": "temporal-unit"
                }
              }
            },
            "then": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "minute",
                    "hour", 
                    "day",
                    "week",
                    "month",
                    "quarter",
                    "year",
                    "minute-of-hour",
                    "hour-of-day",
                    "day-of-week",
                    "day-of-month",
                    "day-of-year",
                    "week-of-year",
                    "month-of-year",
                    "quarter-of-year"
                  ],
                  "description": "Valid temporal unit for temporal-unit parameters"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          {
            "description": "Default value for category/id parameters",
            "if": {
              "properties": {
                "type": {
                  "enum": ["category", "id"]
                }
              }
            },
            "then": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      }
                    ]
                  },
                  "description": "Array of values for multi-value category/id parameters"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          {
            "description": "Default value for location parameters",
            "if": {
              "properties": {
                "type": {
                  "pattern": "^location/"
                }
              }
            },
            "then": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number",
                  "description": "Numeric ZIP codes for location/zip_code type"
                },
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "description": "Array of location values"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          {
            "description": "Fallback for other parameter types",
            "anyOf": [
              { "type": "string" },
              { "type": "number" },
              { "type": "boolean" },
              { "type": "array" },
              { "type": "null" }
            ]
          }
        ]
      },
      "required": {
        "type": "boolean",
        "default": false,
        "description": "Whether the parameter is required and must have a value."
      },
      "values_query_type": {
        "type": "string",
        "enum": ["list", "search", "none"],
        "description": "How parameter values should be queried and presented to users."
      },
      "values_source_type": {
        "anyOf": [
          {
            "type": "string",
            "enum": ["static-list", "card"]
          },
          {
            "type": "null"
          }
        ],
        "description": "Source type for parameter values. Null means default behavior."
      },
      "values_source_config": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "description": "Static list of values for static-list source type.",
            "items": {
              "anyOf": [
                { "type": "string" },
                { "type": "number" },
                { "type": "boolean" },
                {
                  "type": "array",
                  "description": "Parameter value with optional human-readable label",
                  "minItems": 1,
                  "maxItems": 2
                }
              ]
            }
          },
          "card_id": {
            "type": "integer",
            "minimum": 1,
            "description": "ID of the card to use as values source for card source type."
          },
          "value_field": {
            "type": "array",
            "description": "Field reference for the value column when using card source."
          },
          "label_field": {
            "type": "array",
            "description": "Field reference for the label column when using card source."
          }
        },
        "additionalProperties": false,
        "description": "Configuration for parameter value sources."
      },
      "sectionId": {
        "type": "string",
        "minLength": 1,
        "description": "Section identifier for grouping parameters in the UI."
      },
      "temporal_units": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "minute",
            "hour", 
            "day",
            "week",
            "month",
            "quarter",
            "year",
            "minute-of-hour",
            "hour-of-day",
            "day-of-week",
            "day-of-month",
            "day-of-year",
            "week-of-year",
            "month-of-year",
            "quarter-of-year"
          ]
        },
        "description": "Available temporal units for date/time parameters."
      },
      "options": {
        "type": "object",
        "properties": {
          "case-sensitive": {
            "type": "boolean",
            "description": "Whether string comparisons should be case-sensitive."
          }
        },
        "additionalProperties": false,
        "description": "Additional options for parameter behavior."
      },
      "filteringParameters": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "IDs of other parameters that filter the values of this parameter."
      },
      "isMultiSelect": {
        "type": "boolean",
        "description": "Whether the parameter allows multiple value selection."
      },
      "mappings": {
        "description": "Legacy mappings field - exact structure varies and is deprecated."
      }
    },
    "additionalProperties": false,
    "description": "A parameter object that defines an interactive input control for the card. Parameters are automatically generated from template tags in native SQL queries.\n\nTemplate Tag to Parameter Type Mapping:\n- text → category (default text input with autocomplete)\n- number → number/= (numeric input)\n- date → date/single (date picker)\n- dimension (Field Filter) → various types based on selected field characteristics\n\nThe 'type' field is automatically determined by Metabase based on the template tag type and cannot be manually set via the API.\n\nFIELD FILTER EXAMPLES:\n1. String field filter: {\"type\": \"string/contains\", \"target\": [\"dimension\", [\"field\", 123, null]]}\n2. Date range filter: {\"type\": \"date/range\", \"target\": [\"dimension\", [\"field\", 456, null]]}\n3. Number filter: {\"type\": \"number/between\", \"target\": [\"dimension\", [\"field\", 789, null]]}\n4. Template tag field filter: {\"type\": \"string/=\", \"target\": [\"dimension\", [\"template-tag\", \"my_filter\"]]}"
  }
}