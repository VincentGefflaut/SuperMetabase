{
    "components": {
        "schemas": {
            "api.tiles/field-id-or-name": {
                "type": "string"
            },
            "api.tiles/route-params": {
                "properties": {
                    "lat-field": {
                        "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                    },
                    "lon-field": {
                        "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                    },
                    "x": {
                        "description": "value must be an integer.",
                        "type": "integer"
                    },
                    "y": {
                        "description": "value must be an integer.",
                        "type": "integer"
                    },
                    "zoom": {
                        "description": "value must be an integer.",
                        "type": "integer"
                    }
                },
                "required": [
                    "zoom",
                    "x",
                    "y",
                    "lat-field",
                    "lon-field"
                ],
                "type": "object"
            },
            "metabase.analyze.fingerprint.schema/Fingerprint": {
                "properties": {
                    "experimental": {
                        "properties": {},
                        "type": "object"
                    },
                    "global": {
                        "$ref": "#/components/schemas/metabase.analyze.fingerprint.schema~1GlobalFingerprint"
                    },
                    "type": {
                        "$ref": "#/components/schemas/metabase.analyze.fingerprint.schema~1TypeSpecificFingerprint"
                    }
                },
                "type": "object"
            },
            "metabase.analyze.fingerprint.schema/GlobalFingerprint": {
                "properties": {
                    "distinct-count": {
                        "type": "integer"
                    },
                    "nil%": {
                        "$ref": "#/components/schemas/metabase.analyze.fingerprint.schema~1Percent"
                    }
                },
                "type": "object"
            },
            "metabase.analyze.fingerprint.schema/NumberFingerprint": {
                "properties": {
                    "avg": {
                        "type": "number"
                    },
                    "max": {
                        "type": "number"
                    },
                    "min": {
                        "type": "number"
                    },
                    "q1": {
                        "type": "number"
                    },
                    "q3": {
                        "type": "number"
                    },
                    "sd": {
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "metabase.analyze.fingerprint.schema/Percent": {
                "type": "number"
            },
            "metabase.analyze.fingerprint.schema/TemporalFingerprint": {
                "properties": {
                    "earliest": {
                        "type": "string"
                    },
                    "latest": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "metabase.analyze.fingerprint.schema/TextFingerprint": {
                "properties": {
                    "average-length": {
                        "type": "number"
                    },
                    "percent-email": {
                        "$ref": "#/components/schemas/metabase.analyze.fingerprint.schema~1Percent"
                    },
                    "percent-json": {
                        "$ref": "#/components/schemas/metabase.analyze.fingerprint.schema~1Percent"
                    },
                    "percent-state": {
                        "$ref": "#/components/schemas/metabase.analyze.fingerprint.schema~1Percent"
                    },
                    "percent-url": {
                        "$ref": "#/components/schemas/metabase.analyze.fingerprint.schema~1Percent"
                    }
                },
                "type": "object"
            },
            "metabase.analyze.fingerprint.schema/TypeSpecificFingerprint": {
                "properties": {
                    "type/DateTime": {
                        "$ref": "#/components/schemas/metabase.analyze.fingerprint.schema~1TemporalFingerprint"
                    },
                    "type/Number": {
                        "$ref": "#/components/schemas/metabase.analyze.fingerprint.schema~1NumberFingerprint"
                    },
                    "type/Text": {
                        "$ref": "#/components/schemas/metabase.analyze.fingerprint.schema~1TextFingerprint"
                    }
                },
                "type": "object"
            },
            "metabase.analyze.query-results/MaybeUnnormalizedReference": {},
            "metabase.analyze.query-results/ResultColumnMetadata": {
                "properties": {
                    "base_type": {
                        "description": "value must be a valid field data type (keyword or string)."
                    },
                    "converted_timezone": {
                        "$ref": "#/components/schemas/metabase.lib.schema.expression.temporal~1timezone-id"
                    },
                    "description": {
                        "type": "string"
                    },
                    "display_name": {
                        "type": "string"
                    },
                    "field_ref": {
                        "$ref": "#/components/schemas/metabase.analyze.query-results~1MaybeUnnormalizedReference"
                    },
                    "fingerprint": {
                        "$ref": "#/components/schemas/metabase.analyze.fingerprint.schema~1Fingerprint"
                    },
                    "id": {
                        "$ref": "#/components/schemas/metabase.lib.schema.id~1field"
                    },
                    "name": {
                        "type": "string"
                    },
                    "semantic_type": {
                        "description": "value must be a valid field semantic or relation type (keyword or string)."
                    },
                    "unit": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "description": "value must be a keyword or string."
                    }
                },
                "required": [
                    "name",
                    "display_name",
                    "base_type"
                ],
                "type": "object"
            },
            "metabase.analyze.query-results/ResultsMetadata": {
                "description": "value must be an array of valid results column metadata maps.",
                "items": {
                    "$ref": "#/components/schemas/metabase.analyze.query-results~1ResultColumnMetadata"
                },
                "optional": true,
                "type": "array"
            },
            "metabase.api.cache/cache-strategy": {
                "$ref": "#/components/schemas/metabase.api.cache~1cache-strategy.oss"
            },
            "metabase.api.cache/cache-strategy.base": {
                "properties": {
                    "type": {
                        "enum": [
                            "nocache",
                            "ttl",
                            "duration",
                            "schedule"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "metabase.api.cache/cache-strategy.nocache": {
                "properties": {
                    "type": {
                        "const": "nocache"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "metabase.api.cache/cache-strategy.oss": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/metabase.api.cache~1cache-strategy.base"
                    },
                    {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/metabase.api.cache~1cache-strategy.nocache"
                            },
                            {
                                "$ref": "#/components/schemas/metabase.api.cache~1cache-strategy.ttl"
                            }
                        ]
                    }
                ],
                "description": "Schema for a caching strategy (OSS)"
            },
            "metabase.api.cache/cache-strategy.ttl": {
                "additionalProperties": false,
                "properties": {
                    "min_duration_ms": {
                        "description": "value must be an integer greater or equal to than zero.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "multiplier": {
                        "description": "value must be an integer greater than zero.",
                        "minimum": 1,
                        "type": "integer"
                    },
                    "type": {
                        "const": "ttl"
                    }
                },
                "required": [
                    "type",
                    "multiplier",
                    "min_duration_ms"
                ],
                "type": "object"
            },
            "metabase.api.card/card-type": {
                "enum": [
                    "question",
                    "metric",
                    "model"
                ],
                "type": "string"
            },
            "metabase.api.user/user-group-membership": {
                "description": "Group Membership info of a User.\n  In which :is_group_manager is only included if `advanced-permissions` is enabled.",
                "properties": {
                    "id": {
                        "description": "value must be an integer greater than zero.",
                        "minimum": 1,
                        "type": "integer"
                    },
                    "is_group_manager": {
                        "description": "Only relevant if `advanced-permissions` is enabled. If it is, you should always include this key.",
                        "type": "boolean"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            },
            "metabase.channel.models.channel/Channel": {
                "description": "Channel schema.",
                "properties": {
                    "active": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "details": {
                        "properties": {},
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "type",
                    "details"
                ],
                "type": "object"
            },
            "metabase.channel.models.channel/ChannelTemplate": {
                "description": "Channel Template schema.",
                "oneOf": [
                    {
                        "properties": {
                            "channel_type": {},
                            "details": {
                                "$ref": "#/components/schemas/metabase.channel.models.channel~1ChannelTemplateEmailDetails"
                            }
                        },
                        "required": [
                            "channel_type",
                            "details"
                        ],
                        "type": "object"
                    },
                    {}
                ]
            },
            "metabase.channel.models.channel/ChannelTemplateEmailDetails": {
                "oneOf": [
                    {
                        "properties": {
                            "path": {
                                "type": "string"
                            },
                            "recipient-type": {
                                "enum": [
                                    "cc",
                                    "bcc",
                                    "cc",
                                    "bcc"
                                ]
                            },
                            "subject": {
                                "type": "string"
                            },
                            "type": {
                                "enum": [
                                    "email/handlebars-resource",
                                    "email/handlebars-text",
                                    "email/handlebars-resource",
                                    "email/handlebars-text"
                                ]
                            }
                        },
                        "required": [
                            "type",
                            "subject",
                            "path"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "body": {
                                "type": "string"
                            },
                            "recipient-type": {
                                "enum": [
                                    "cc",
                                    "bcc",
                                    "cc",
                                    "bcc"
                                ]
                            },
                            "subject": {
                                "type": "string"
                            },
                            "type": {
                                "enum": [
                                    "email/handlebars-resource",
                                    "email/handlebars-text",
                                    "email/handlebars-resource",
                                    "email/handlebars-text"
                                ]
                            }
                        },
                        "required": [
                            "type",
                            "subject",
                            "body"
                        ],
                        "type": "object"
                    }
                ]
            },
            "metabase.lib.schema.common/non-blank-string": {
                "minLength": 1,
                "type": "string"
            },
            "metabase.lib.schema.expression.temporal/timezone-id": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                    },
                    {
                        "anyOf": [
                            {
                                "enum": [
                                    "Africa/Abidjan",
                                    "Africa/Accra",
                                    "Africa/Addis_Ababa",
                                    "Africa/Algiers",
                                    "Africa/Asmara",
                                    "Africa/Asmera",
                                    "Africa/Bamako",
                                    "Africa/Bangui",
                                    "Africa/Banjul",
                                    "Africa/Bissau",
                                    "Africa/Blantyre",
                                    "Africa/Brazzaville",
                                    "Africa/Bujumbura",
                                    "Africa/Cairo",
                                    "Africa/Casablanca",
                                    "Africa/Ceuta",
                                    "Africa/Conakry",
                                    "Africa/Dakar",
                                    "Africa/Dar_es_Salaam",
                                    "Africa/Djibouti",
                                    "Africa/Douala",
                                    "Africa/El_Aaiun",
                                    "Africa/Freetown",
                                    "Africa/Gaborone",
                                    "Africa/Harare",
                                    "Africa/Johannesburg",
                                    "Africa/Juba",
                                    "Africa/Kampala",
                                    "Africa/Khartoum",
                                    "Africa/Kigali",
                                    "Africa/Kinshasa",
                                    "Africa/Lagos",
                                    "Africa/Libreville",
                                    "Africa/Lome",
                                    "Africa/Luanda",
                                    "Africa/Lubumbashi",
                                    "Africa/Lusaka",
                                    "Africa/Malabo",
                                    "Africa/Maputo",
                                    "Africa/Maseru",
                                    "Africa/Mbabane",
                                    "Africa/Mogadishu",
                                    "Africa/Monrovia",
                                    "Africa/Nairobi",
                                    "Africa/Ndjamena",
                                    "Africa/Niamey",
                                    "Africa/Nouakchott",
                                    "Africa/Ouagadougou",
                                    "Africa/Porto-Novo",
                                    "Africa/Sao_Tome",
                                    "Africa/Timbuktu",
                                    "Africa/Tripoli",
                                    "Africa/Tunis",
                                    "Africa/Windhoek",
                                    "America/Adak",
                                    "America/Anchorage",
                                    "America/Anguilla",
                                    "America/Antigua",
                                    "America/Araguaina",
                                    "America/Argentina/Buenos_Aires",
                                    "America/Argentina/Catamarca",
                                    "America/Argentina/ComodRivadavia",
                                    "America/Argentina/Cordoba",
                                    "America/Argentina/Jujuy",
                                    "America/Argentina/La_Rioja",
                                    "America/Argentina/Mendoza",
                                    "America/Argentina/Rio_Gallegos",
                                    "America/Argentina/Salta",
                                    "America/Argentina/San_Juan",
                                    "America/Argentina/San_Luis",
                                    "America/Argentina/Tucuman",
                                    "America/Argentina/Ushuaia",
                                    "America/Aruba",
                                    "America/Asuncion",
                                    "America/Atikokan",
                                    "America/Atka",
                                    "America/Bahia",
                                    "America/Bahia_Banderas",
                                    "America/Barbados",
                                    "America/Belem",
                                    "America/Belize",
                                    "America/Blanc-Sablon",
                                    "America/Boa_Vista",
                                    "America/Bogota",
                                    "America/Boise",
                                    "America/Buenos_Aires",
                                    "America/Cambridge_Bay",
                                    "America/Campo_Grande",
                                    "America/Cancun",
                                    "America/Caracas",
                                    "America/Catamarca",
                                    "America/Cayenne",
                                    "America/Cayman",
                                    "America/Chicago",
                                    "America/Chihuahua",
                                    "America/Ciudad_Juarez",
                                    "America/Coral_Harbour",
                                    "America/Cordoba",
                                    "America/Costa_Rica",
                                    "America/Creston",
                                    "America/Cuiaba",
                                    "America/Curacao",
                                    "America/Danmarkshavn",
                                    "America/Dawson",
                                    "America/Dawson_Creek",
                                    "America/Denver",
                                    "America/Detroit",
                                    "America/Dominica",
                                    "America/Edmonton",
                                    "America/Eirunepe",
                                    "America/El_Salvador",
                                    "America/Ensenada",
                                    "America/Fort_Nelson",
                                    "America/Fort_Wayne",
                                    "America/Fortaleza",
                                    "America/Glace_Bay",
                                    "America/Godthab",
                                    "America/Goose_Bay",
                                    "America/Grand_Turk",
                                    "America/Grenada",
                                    "America/Guadeloupe",
                                    "America/Guatemala",
                                    "America/Guayaquil",
                                    "America/Guyana",
                                    "America/Halifax",
                                    "America/Havana",
                                    "America/Hermosillo",
                                    "America/Indiana/Indianapolis",
                                    "America/Indiana/Knox",
                                    "America/Indiana/Marengo",
                                    "America/Indiana/Petersburg",
                                    "America/Indiana/Tell_City",
                                    "America/Indiana/Vevay",
                                    "America/Indiana/Vincennes",
                                    "America/Indiana/Winamac",
                                    "America/Indianapolis",
                                    "America/Inuvik",
                                    "America/Iqaluit",
                                    "America/Jamaica",
                                    "America/Jujuy",
                                    "America/Juneau",
                                    "America/Kentucky/Louisville",
                                    "America/Kentucky/Monticello",
                                    "America/Knox_IN",
                                    "America/Kralendijk",
                                    "America/La_Paz",
                                    "America/Lima",
                                    "America/Los_Angeles",
                                    "America/Louisville",
                                    "America/Lower_Princes",
                                    "America/Maceio",
                                    "America/Managua",
                                    "America/Manaus",
                                    "America/Marigot",
                                    "America/Martinique",
                                    "America/Matamoros",
                                    "America/Mazatlan",
                                    "America/Mendoza",
                                    "America/Menominee",
                                    "America/Merida",
                                    "America/Metlakatla",
                                    "America/Mexico_City",
                                    "America/Miquelon",
                                    "America/Moncton",
                                    "America/Monterrey",
                                    "America/Montevideo",
                                    "America/Montreal",
                                    "America/Montserrat",
                                    "America/Nassau",
                                    "America/New_York",
                                    "America/Nipigon",
                                    "America/Nome",
                                    "America/Noronha",
                                    "America/North_Dakota/Beulah",
                                    "America/North_Dakota/Center",
                                    "America/North_Dakota/New_Salem",
                                    "America/Nuuk",
                                    "America/Ojinaga",
                                    "America/Panama",
                                    "America/Pangnirtung",
                                    "America/Paramaribo",
                                    "America/Phoenix",
                                    "America/Port-au-Prince",
                                    "America/Port_of_Spain",
                                    "America/Porto_Acre",
                                    "America/Porto_Velho",
                                    "America/Puerto_Rico",
                                    "America/Punta_Arenas",
                                    "America/Rainy_River",
                                    "America/Rankin_Inlet",
                                    "America/Recife",
                                    "America/Regina",
                                    "America/Resolute",
                                    "America/Rio_Branco",
                                    "America/Rosario",
                                    "America/Santa_Isabel",
                                    "America/Santarem",
                                    "America/Santiago",
                                    "America/Santo_Domingo",
                                    "America/Sao_Paulo",
                                    "America/Scoresbysund",
                                    "America/Shiprock",
                                    "America/Sitka",
                                    "America/St_Barthelemy",
                                    "America/St_Johns",
                                    "America/St_Kitts",
                                    "America/St_Lucia",
                                    "America/St_Thomas",
                                    "America/St_Vincent",
                                    "America/Swift_Current",
                                    "America/Tegucigalpa",
                                    "America/Thule",
                                    "America/Thunder_Bay",
                                    "America/Tijuana",
                                    "America/Toronto",
                                    "America/Tortola",
                                    "America/Vancouver",
                                    "America/Virgin",
                                    "America/Whitehorse",
                                    "America/Winnipeg",
                                    "America/Yakutat",
                                    "America/Yellowknife",
                                    "Antarctica/Casey",
                                    "Antarctica/Davis",
                                    "Antarctica/DumontDUrville",
                                    "Antarctica/Macquarie",
                                    "Antarctica/Mawson",
                                    "Antarctica/McMurdo",
                                    "Antarctica/Palmer",
                                    "Antarctica/Rothera",
                                    "Antarctica/South_Pole",
                                    "Antarctica/Syowa",
                                    "Antarctica/Troll",
                                    "Antarctica/Vostok",
                                    "Arctic/Longyearbyen",
                                    "Asia/Aden",
                                    "Asia/Almaty",
                                    "Asia/Amman",
                                    "Asia/Anadyr",
                                    "Asia/Aqtau",
                                    "Asia/Aqtobe",
                                    "Asia/Ashgabat",
                                    "Asia/Ashkhabad",
                                    "Asia/Atyrau",
                                    "Asia/Baghdad",
                                    "Asia/Bahrain",
                                    "Asia/Baku",
                                    "Asia/Bangkok",
                                    "Asia/Barnaul",
                                    "Asia/Beirut",
                                    "Asia/Bishkek",
                                    "Asia/Brunei",
                                    "Asia/Calcutta",
                                    "Asia/Chita",
                                    "Asia/Choibalsan",
                                    "Asia/Chongqing",
                                    "Asia/Chungking",
                                    "Asia/Colombo",
                                    "Asia/Dacca",
                                    "Asia/Damascus",
                                    "Asia/Dhaka",
                                    "Asia/Dili",
                                    "Asia/Dubai",
                                    "Asia/Dushanbe",
                                    "Asia/Famagusta",
                                    "Asia/Gaza",
                                    "Asia/Harbin",
                                    "Asia/Hebron",
                                    "Asia/Ho_Chi_Minh",
                                    "Asia/Hong_Kong",
                                    "Asia/Hovd",
                                    "Asia/Irkutsk",
                                    "Asia/Istanbul",
                                    "Asia/Jakarta",
                                    "Asia/Jayapura",
                                    "Asia/Jerusalem",
                                    "Asia/Kabul",
                                    "Asia/Kamchatka",
                                    "Asia/Karachi",
                                    "Asia/Kashgar",
                                    "Asia/Kathmandu",
                                    "Asia/Katmandu",
                                    "Asia/Khandyga",
                                    "Asia/Kolkata",
                                    "Asia/Krasnoyarsk",
                                    "Asia/Kuala_Lumpur",
                                    "Asia/Kuching",
                                    "Asia/Kuwait",
                                    "Asia/Macao",
                                    "Asia/Macau",
                                    "Asia/Magadan",
                                    "Asia/Makassar",
                                    "Asia/Manila",
                                    "Asia/Muscat",
                                    "Asia/Nicosia",
                                    "Asia/Novokuznetsk",
                                    "Asia/Novosibirsk",
                                    "Asia/Omsk",
                                    "Asia/Oral",
                                    "Asia/Phnom_Penh",
                                    "Asia/Pontianak",
                                    "Asia/Pyongyang",
                                    "Asia/Qatar",
                                    "Asia/Qostanay",
                                    "Asia/Qyzylorda",
                                    "Asia/Rangoon",
                                    "Asia/Riyadh",
                                    "Asia/Saigon",
                                    "Asia/Sakhalin",
                                    "Asia/Samarkand",
                                    "Asia/Seoul",
                                    "Asia/Shanghai",
                                    "Asia/Singapore",
                                    "Asia/Srednekolymsk",
                                    "Asia/Taipei",
                                    "Asia/Tashkent",
                                    "Asia/Tbilisi",
                                    "Asia/Tehran",
                                    "Asia/Tel_Aviv",
                                    "Asia/Thimbu",
                                    "Asia/Thimphu",
                                    "Asia/Tokyo",
                                    "Asia/Tomsk",
                                    "Asia/Ujung_Pandang",
                                    "Asia/Ulaanbaatar",
                                    "Asia/Ulan_Bator",
                                    "Asia/Urumqi",
                                    "Asia/Ust-Nera",
                                    "Asia/Vientiane",
                                    "Asia/Vladivostok",
                                    "Asia/Yakutsk",
                                    "Asia/Yangon",
                                    "Asia/Yekaterinburg",
                                    "Asia/Yerevan",
                                    "Atlantic/Azores",
                                    "Atlantic/Bermuda",
                                    "Atlantic/Canary",
                                    "Atlantic/Cape_Verde",
                                    "Atlantic/Faeroe",
                                    "Atlantic/Faroe",
                                    "Atlantic/Jan_Mayen",
                                    "Atlantic/Madeira",
                                    "Atlantic/Reykjavik",
                                    "Atlantic/South_Georgia",
                                    "Atlantic/St_Helena",
                                    "Atlantic/Stanley",
                                    "Australia/ACT",
                                    "Australia/Adelaide",
                                    "Australia/Brisbane",
                                    "Australia/Broken_Hill",
                                    "Australia/Canberra",
                                    "Australia/Currie",
                                    "Australia/Darwin",
                                    "Australia/Eucla",
                                    "Australia/Hobart",
                                    "Australia/LHI",
                                    "Australia/Lindeman",
                                    "Australia/Lord_Howe",
                                    "Australia/Melbourne",
                                    "Australia/NSW",
                                    "Australia/North",
                                    "Australia/Perth",
                                    "Australia/Queensland",
                                    "Australia/South",
                                    "Australia/Sydney",
                                    "Australia/Tasmania",
                                    "Australia/Victoria",
                                    "Australia/West",
                                    "Australia/Yancowinna",
                                    "Brazil/Acre",
                                    "Brazil/DeNoronha",
                                    "Brazil/East",
                                    "Brazil/West",
                                    "CET",
                                    "CST6CDT",
                                    "Canada/Atlantic",
                                    "Canada/Central",
                                    "Canada/Eastern",
                                    "Canada/Mountain",
                                    "Canada/Newfoundland",
                                    "Canada/Pacific",
                                    "Canada/Saskatchewan",
                                    "Canada/Yukon",
                                    "Chile/Continental",
                                    "Chile/EasterIsland",
                                    "Cuba",
                                    "EET",
                                    "EST5EDT",
                                    "Egypt",
                                    "Eire",
                                    "Etc/GMT",
                                    "Etc/GMT+0",
                                    "Etc/GMT+1",
                                    "Etc/GMT+10",
                                    "Etc/GMT+11",
                                    "Etc/GMT+12",
                                    "Etc/GMT+2",
                                    "Etc/GMT+3",
                                    "Etc/GMT+4",
                                    "Etc/GMT+5",
                                    "Etc/GMT+6",
                                    "Etc/GMT+7",
                                    "Etc/GMT+8",
                                    "Etc/GMT+9",
                                    "Etc/GMT-0",
                                    "Etc/GMT-1",
                                    "Etc/GMT-10",
                                    "Etc/GMT-11",
                                    "Etc/GMT-12",
                                    "Etc/GMT-13",
                                    "Etc/GMT-14",
                                    "Etc/GMT-2",
                                    "Etc/GMT-3",
                                    "Etc/GMT-4",
                                    "Etc/GMT-5",
                                    "Etc/GMT-6",
                                    "Etc/GMT-7",
                                    "Etc/GMT-8",
                                    "Etc/GMT-9",
                                    "Etc/GMT0",
                                    "Etc/Greenwich",
                                    "Etc/UCT",
                                    "Etc/UTC",
                                    "Etc/Universal",
                                    "Etc/Zulu",
                                    "Europe/Amsterdam",
                                    "Europe/Andorra",
                                    "Europe/Astrakhan",
                                    "Europe/Athens",
                                    "Europe/Belfast",
                                    "Europe/Belgrade",
                                    "Europe/Berlin",
                                    "Europe/Bratislava",
                                    "Europe/Brussels",
                                    "Europe/Bucharest",
                                    "Europe/Budapest",
                                    "Europe/Busingen",
                                    "Europe/Chisinau",
                                    "Europe/Copenhagen",
                                    "Europe/Dublin",
                                    "Europe/Gibraltar",
                                    "Europe/Guernsey",
                                    "Europe/Helsinki",
                                    "Europe/Isle_of_Man",
                                    "Europe/Istanbul",
                                    "Europe/Jersey",
                                    "Europe/Kaliningrad",
                                    "Europe/Kiev",
                                    "Europe/Kirov",
                                    "Europe/Kyiv",
                                    "Europe/Lisbon",
                                    "Europe/Ljubljana",
                                    "Europe/London",
                                    "Europe/Luxembourg",
                                    "Europe/Madrid",
                                    "Europe/Malta",
                                    "Europe/Mariehamn",
                                    "Europe/Minsk",
                                    "Europe/Monaco",
                                    "Europe/Moscow",
                                    "Europe/Nicosia",
                                    "Europe/Oslo",
                                    "Europe/Paris",
                                    "Europe/Podgorica",
                                    "Europe/Prague",
                                    "Europe/Riga",
                                    "Europe/Rome",
                                    "Europe/Samara",
                                    "Europe/San_Marino",
                                    "Europe/Sarajevo",
                                    "Europe/Saratov",
                                    "Europe/Simferopol",
                                    "Europe/Skopje",
                                    "Europe/Sofia",
                                    "Europe/Stockholm",
                                    "Europe/Tallinn",
                                    "Europe/Tirane",
                                    "Europe/Tiraspol",
                                    "Europe/Ulyanovsk",
                                    "Europe/Uzhgorod",
                                    "Europe/Vaduz",
                                    "Europe/Vatican",
                                    "Europe/Vienna",
                                    "Europe/Vilnius",
                                    "Europe/Volgograd",
                                    "Europe/Warsaw",
                                    "Europe/Zagreb",
                                    "Europe/Zaporozhye",
                                    "Europe/Zurich",
                                    "GB",
                                    "GB-Eire",
                                    "GMT",
                                    "GMT0",
                                    "Greenwich",
                                    "Hongkong",
                                    "Iceland",
                                    "Indian/Antananarivo",
                                    "Indian/Chagos",
                                    "Indian/Christmas",
                                    "Indian/Cocos",
                                    "Indian/Comoro",
                                    "Indian/Kerguelen",
                                    "Indian/Mahe",
                                    "Indian/Maldives",
                                    "Indian/Mauritius",
                                    "Indian/Mayotte",
                                    "Indian/Reunion",
                                    "Iran",
                                    "Israel",
                                    "Jamaica",
                                    "Japan",
                                    "Kwajalein",
                                    "Libya",
                                    "MET",
                                    "MST7MDT",
                                    "Mexico/BajaNorte",
                                    "Mexico/BajaSur",
                                    "Mexico/General",
                                    "NZ",
                                    "NZ-CHAT",
                                    "Navajo",
                                    "PRC",
                                    "PST8PDT",
                                    "Pacific/Apia",
                                    "Pacific/Auckland",
                                    "Pacific/Bougainville",
                                    "Pacific/Chatham",
                                    "Pacific/Chuuk",
                                    "Pacific/Easter",
                                    "Pacific/Efate",
                                    "Pacific/Enderbury",
                                    "Pacific/Fakaofo",
                                    "Pacific/Fiji",
                                    "Pacific/Funafuti",
                                    "Pacific/Galapagos",
                                    "Pacific/Gambier",
                                    "Pacific/Guadalcanal",
                                    "Pacific/Guam",
                                    "Pacific/Honolulu",
                                    "Pacific/Johnston",
                                    "Pacific/Kanton",
                                    "Pacific/Kiritimati",
                                    "Pacific/Kosrae",
                                    "Pacific/Kwajalein",
                                    "Pacific/Majuro",
                                    "Pacific/Marquesas",
                                    "Pacific/Midway",
                                    "Pacific/Nauru",
                                    "Pacific/Niue",
                                    "Pacific/Norfolk",
                                    "Pacific/Noumea",
                                    "Pacific/Pago_Pago",
                                    "Pacific/Palau",
                                    "Pacific/Pitcairn",
                                    "Pacific/Pohnpei",
                                    "Pacific/Ponape",
                                    "Pacific/Port_Moresby",
                                    "Pacific/Rarotonga",
                                    "Pacific/Saipan",
                                    "Pacific/Samoa",
                                    "Pacific/Tahiti",
                                    "Pacific/Tarawa",
                                    "Pacific/Tongatapu",
                                    "Pacific/Truk",
                                    "Pacific/Wake",
                                    "Pacific/Wallis",
                                    "Pacific/Yap",
                                    "Poland",
                                    "Portugal",
                                    "ROK",
                                    "Singapore",
                                    "SystemV/AST4",
                                    "SystemV/AST4ADT",
                                    "SystemV/CST6",
                                    "SystemV/CST6CDT",
                                    "SystemV/EST5",
                                    "SystemV/EST5EDT",
                                    "SystemV/HST10",
                                    "SystemV/MST7",
                                    "SystemV/MST7MDT",
                                    "SystemV/PST8",
                                    "SystemV/PST8PDT",
                                    "SystemV/YST9",
                                    "SystemV/YST9YDT",
                                    "Turkey",
                                    "UCT",
                                    "US/Alaska",
                                    "US/Aleutian",
                                    "US/Arizona",
                                    "US/Central",
                                    "US/East-Indiana",
                                    "US/Eastern",
                                    "US/Hawaii",
                                    "US/Indiana-Starke",
                                    "US/Michigan",
                                    "US/Mountain",
                                    "US/Pacific",
                                    "US/Samoa",
                                    "UTC",
                                    "Universal",
                                    "W-SU",
                                    "WET",
                                    "Zulu"
                                ],
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/metabase.lib.schema.literal~1string.zone-offset"
                            }
                        ]
                    }
                ]
            },
            "metabase.lib.schema.id/field": {
                "minimum": 1,
                "type": "integer"
            },
            "metabase.lib.schema.literal/string.datetime": {
                "anyOf": [
                    {
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d{1,6})?)?$",
                        "type": "string"
                    },
                    {
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d{1,6})?)?(?:Z|(?:[+-]\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d{1,6})?)?))$",
                        "type": "string"
                    }
                ]
            },
            "metabase.lib.schema.literal/string.zone-offset": {
                "pattern": "(?:Z|(?:[+-]\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d{1,6})?)?))",
                "type": "string"
            },
            "metabase.lib.schema.metadata/column.has-field-values": {
                "enum": [
                    "auto-list",
                    "list",
                    "none",
                    "search"
                ],
                "type": "string"
            },
            "metabase.lib.schema.temporal-bucketing/unit": {
                "enum": [
                    "quarter",
                    "day",
                    "hour",
                    "week",
                    "second",
                    "default",
                    "day-of-week",
                    "hour-of-day",
                    "month",
                    "month-of-year",
                    "day-of-month",
                    "year",
                    "day-of-year",
                    "millisecond",
                    "year-of-era",
                    "second-of-minute",
                    "week-of-year",
                    "quarter-of-year",
                    "minute-of-hour",
                    "minute"
                ],
                "type": "string"
            },
            "metabase.notification.models/FullyHydratedNotification": {
                "description": "Fully hydrated notification.",
                "oneOf": [
                    {
                        "oneOf": [
                            {
                                "properties": {
                                    "creator": {
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "handlers": {
                                        "items": {
                                            "properties": {
                                                "active": {
                                                    "type": "boolean"
                                                },
                                                "channel": {
                                                    "$ref": "#/components/schemas/metabase.channel.models.channel~1Channel"
                                                },
                                                "channel_id": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "channel_type": {},
                                                "notification_id": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "recipients": {
                                                    "items": {
                                                        "$ref": "#/components/schemas/metabase.notification.models~1NotificationRecipient"
                                                    },
                                                    "type": "array"
                                                },
                                                "template": {
                                                    "$ref": "#/components/schemas/metabase.channel.models.channel~1ChannelTemplate"
                                                },
                                                "template_id": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                }
                                            },
                                            "required": [
                                                "channel_type"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "payload": {
                                        "$ref": "#/components/schemas/metabase.notification.models~1NotificationCard"
                                    },
                                    "payload_id": {
                                        "type": "null"
                                    },
                                    "payload_type": {
                                        "enum": [
                                            "notification/dashboard",
                                            "notification/system-event",
                                            "notification/testing",
                                            "notification/card"
                                        ],
                                        "type": "string"
                                    },
                                    "subscriptions": {
                                        "items": {
                                            "$ref": "#/components/schemas/metabase.notification.models~1NotificationSubscription"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "payload_type",
                                    "payload"
                                ],
                                "type": "object"
                            },
                            {}
                        ]
                    },
                    {
                        "oneOf": [
                            {
                                "properties": {
                                    "creator": {
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "creator_id": {
                                        "type": "integer"
                                    },
                                    "handlers": {
                                        "items": {
                                            "properties": {
                                                "active": {
                                                    "type": "boolean"
                                                },
                                                "channel": {
                                                    "$ref": "#/components/schemas/metabase.channel.models.channel~1Channel"
                                                },
                                                "channel_id": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "channel_type": {},
                                                "notification_id": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "recipients": {
                                                    "items": {
                                                        "$ref": "#/components/schemas/metabase.notification.models~1NotificationRecipient"
                                                    },
                                                    "type": "array"
                                                },
                                                "template": {
                                                    "$ref": "#/components/schemas/metabase.channel.models.channel~1ChannelTemplate"
                                                },
                                                "template_id": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                }
                                            },
                                            "required": [
                                                "channel_type"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "payload": {
                                        "$ref": "#/components/schemas/metabase.notification.models~1NotificationCard"
                                    },
                                    "payload_id": {
                                        "type": "integer"
                                    },
                                    "payload_type": {
                                        "enum": [
                                            "notification/dashboard",
                                            "notification/system-event",
                                            "notification/testing",
                                            "notification/card"
                                        ],
                                        "type": "string"
                                    },
                                    "subscriptions": {
                                        "items": {
                                            "$ref": "#/components/schemas/metabase.notification.models~1NotificationSubscription"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "payload_type",
                                    "payload"
                                ],
                                "type": "object"
                            },
                            {}
                        ]
                    },
                    {
                        "oneOf": [
                            {
                                "properties": {
                                    "creator": {
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "handlers": {
                                        "items": {
                                            "properties": {
                                                "active": {
                                                    "type": "boolean"
                                                },
                                                "channel": {
                                                    "$ref": "#/components/schemas/metabase.channel.models.channel~1Channel"
                                                },
                                                "channel_id": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "channel_type": {},
                                                "notification_id": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "recipients": {
                                                    "items": {
                                                        "$ref": "#/components/schemas/metabase.notification.models~1NotificationRecipient"
                                                    },
                                                    "type": "array"
                                                },
                                                "template": {
                                                    "$ref": "#/components/schemas/metabase.channel.models.channel~1ChannelTemplate"
                                                },
                                                "template_id": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                }
                                            },
                                            "required": [
                                                "channel_type"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "payload": {
                                        "$ref": "#/components/schemas/metabase.notification.models~1NotificationCard"
                                    },
                                    "subscriptions": {
                                        "items": {
                                            "$ref": "#/components/schemas/metabase.notification.models~1NotificationSubscription"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "payload"
                                ],
                                "type": "object"
                            },
                            {}
                        ]
                    }
                ]
            },
            "metabase.notification.models/Notification": {
                "oneOf": [
                    {
                        "properties": {
                            "payload_id": {
                                "type": "null"
                            },
                            "payload_type": {
                                "enum": [
                                    "notification/dashboard",
                                    "notification/system-event",
                                    "notification/testing",
                                    "notification/card"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "payload_type"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "creator_id": {
                                "type": "integer"
                            },
                            "payload_id": {
                                "type": "integer"
                            },
                            "payload_type": {
                                "enum": [
                                    "notification/dashboard",
                                    "notification/system-event",
                                    "notification/testing",
                                    "notification/card"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "payload_type"
                        ],
                        "type": "object"
                    },
                    {}
                ]
            },
            "metabase.notification.models/NotificationCard": {
                "description": "Schema for :model/NotificationCard.",
                "properties": {
                    "card": {
                        "properties": {},
                        "type": "object"
                    },
                    "card_id": {
                        "description": "value must be an integer greater than zero.",
                        "minimum": 1,
                        "type": "integer"
                    },
                    "send_condition": {
                        "enum": [
                            "goal_below",
                            "has_result",
                            "goal_above"
                        ],
                        "type": "string"
                    },
                    "send_once": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "card_id"
                ],
                "type": "object"
            },
            "metabase.notification.models/NotificationHandler": {
                "properties": {
                    "active": {
                        "type": "boolean"
                    },
                    "channel_id": {
                        "description": "value must be an integer greater than zero.",
                        "minimum": 1,
                        "type": "integer"
                    },
                    "channel_type": {},
                    "notification_id": {
                        "description": "value must be an integer greater than zero.",
                        "minimum": 1,
                        "type": "integer"
                    },
                    "template_id": {
                        "description": "value must be an integer greater than zero.",
                        "minimum": 1,
                        "type": "integer"
                    }
                },
                "required": [
                    "channel_type"
                ],
                "type": "object"
            },
            "metabase.notification.models/NotificationRecipient": {
                "description": "Schema for :model/NotificationRecipient.",
                "oneOf": [
                    {
                        "properties": {
                            "details": {},
                            "notification_handler_id": {
                                "description": "value must be an integer greater than zero.",
                                "minimum": 1,
                                "type": "integer"
                            },
                            "permissions_group_id": {},
                            "type": {
                                "enum": [
                                    "notification-recipient/raw-value",
                                    "notification-recipient/user",
                                    "notification-recipient/template",
                                    "notification-recipient/group"
                                ],
                                "type": "string"
                            },
                            "user_id": {
                                "description": "value must be an integer greater than zero.",
                                "minimum": 1,
                                "type": "integer"
                            }
                        },
                        "required": [
                            "type",
                            "user_id"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "details": {},
                            "notification_handler_id": {
                                "description": "value must be an integer greater than zero.",
                                "minimum": 1,
                                "type": "integer"
                            },
                            "permissions_group_id": {
                                "description": "value must be an integer greater than zero.",
                                "minimum": 1,
                                "type": "integer"
                            },
                            "type": {
                                "enum": [
                                    "notification-recipient/raw-value",
                                    "notification-recipient/user",
                                    "notification-recipient/template",
                                    "notification-recipient/group"
                                ],
                                "type": "string"
                            },
                            "user_id": {}
                        },
                        "required": [
                            "type",
                            "permissions_group_id"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "details": {
                                "additionalProperties": false,
                                "properties": {
                                    "value": {}
                                },
                                "required": [
                                    "value"
                                ],
                                "type": "object"
                            },
                            "notification_handler_id": {
                                "description": "value must be an integer greater than zero.",
                                "minimum": 1,
                                "type": "integer"
                            },
                            "permissions_group_id": {},
                            "type": {
                                "enum": [
                                    "notification-recipient/raw-value",
                                    "notification-recipient/user",
                                    "notification-recipient/template",
                                    "notification-recipient/group"
                                ],
                                "type": "string"
                            },
                            "user_id": {}
                        },
                        "required": [
                            "type",
                            "details"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "details": {
                                "additionalProperties": false,
                                "properties": {
                                    "is_optional": {
                                        "type": "boolean"
                                    },
                                    "pattern": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "pattern"
                                ],
                                "type": "object"
                            },
                            "notification_handler_id": {
                                "description": "value must be an integer greater than zero.",
                                "minimum": 1,
                                "type": "integer"
                            },
                            "permissions_group_id": {},
                            "type": {
                                "enum": [
                                    "notification-recipient/raw-value",
                                    "notification-recipient/user",
                                    "notification-recipient/template",
                                    "notification-recipient/group"
                                ],
                                "type": "string"
                            },
                            "user_id": {}
                        },
                        "required": [
                            "type",
                            "details"
                        ],
                        "type": "object"
                    }
                ]
            },
            "metabase.notification.models/NotificationSubscription": {
                "description": "Schema for :model/NotificationSubscription.",
                "oneOf": [
                    {
                        "properties": {
                            "cron_schedule": {
                                "type": "null"
                            },
                            "event_name": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": {
                                "enum": [
                                    "notification-subscription/cron",
                                    "notification-subscription/system-event"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type",
                            "event_name"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "cron_schedule": {
                                "type": "string"
                            },
                            "event_name": {
                                "type": "null"
                            },
                            "type": {
                                "enum": [
                                    "notification-subscription/cron",
                                    "notification-subscription/system-event"
                                ],
                                "type": "string"
                            },
                            "ui_display_type": {
                                "enum": [
                                    "cron/raw",
                                    "cron/builder"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type",
                            "cron_schedule"
                        ],
                        "type": "object"
                    }
                ]
            },
            "metabase.sync.schedules/ExpandedSchedulesMap": {
                "description": "value must be a valid map of schedule maps for a DB.",
                "properties": {
                    "cache_field_values": {
                        "$ref": "#/components/schemas/metabase.util.cron~1ScheduleMap"
                    },
                    "metadata_sync": {
                        "$ref": "#/components/schemas/metabase.util.cron~1ScheduleMap"
                    }
                },
                "type": "object"
            },
            "metabase.timeline.api.timeline/include": {
                "enum": [
                    "events"
                ],
                "type": "string"
            },
            "metabase.util.cron/CronHour": {
                "maximum": 23,
                "minimum": 0,
                "type": "integer"
            },
            "metabase.util.cron/CronMinute": {
                "maximum": 59,
                "minimum": 0,
                "type": "integer"
            },
            "metabase.util.cron/ScheduleMap": {
                "description": "value must be a valid schedule map. See schema in metabase.util.cron for details.",
                "properties": {
                    "schedule_day": {
                        "enum": [
                            "sun",
                            "mon",
                            "tue",
                            "wed",
                            "thu",
                            "fri",
                            "sat"
                        ],
                        "type": "string"
                    },
                    "schedule_frame": {
                        "enum": [
                            "first",
                            "mid",
                            "last"
                        ],
                        "type": "string"
                    },
                    "schedule_hour": {
                        "$ref": "#/components/schemas/metabase.util.cron~1CronHour"
                    },
                    "schedule_minute": {
                        "$ref": "#/components/schemas/metabase.util.cron~1CronMinute"
                    },
                    "schedule_type": {
                        "enum": [
                            "hourly",
                            "daily",
                            "weekly",
                            "monthly"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "schedule_type"
                ],
                "type": "object"
            }
        }
    },
    "info": {
        "title": "Metabase API",
        "version": "v0.54.2"
    },
    "openapi": "3.1.0",
    "paths": {
        "/api/action/": {
            "get": {
                "description": "Returns actions that can be used for QueryActions. By default lists all viewable actions. Pass optional\n  `?model-id=<model-id>` to limit to actions on a particular model.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "model-id",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/action/",
                "tags": [
                    "/api/action"
                ]
            },
            "post": {
                "description": "Create a new action.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "database_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "dataset_query": {
                                        "type": "object"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "error_handle": {
                                        "allOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "description": "must be a valid json-query, something like '.item.title'"
                                            }
                                        ]
                                    },
                                    "kind": {
                                        "description": "Unsupported implicit action kind",
                                        "enum": [
                                            "row/create",
                                            "row/update",
                                            "row/delete",
                                            "bulk/create",
                                            "bulk/update",
                                            "bulk/delete"
                                        ],
                                        "type": "string"
                                    },
                                    "model_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "parameter_mappings": {
                                        "type": "object"
                                    },
                                    "parameters": {
                                        "items": {
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "response_handle": {
                                        "allOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "description": "must be a valid json-query, something like '.item.title'"
                                            }
                                        ]
                                    },
                                    "template": {
                                        "additionalProperties": false,
                                        "properties": {
                                            "body": {
                                                "type": "string"
                                            },
                                            "headers": {
                                                "type": "string"
                                            },
                                            "method": {
                                                "enum": [
                                                    "GET",
                                                    "POST",
                                                    "PUT",
                                                    "DELETE",
                                                    "PATCH"
                                                ],
                                                "type": "string"
                                            },
                                            "parameter_mappings": {
                                                "type": "object"
                                            },
                                            "parameters": {
                                                "items": {
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "url": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "method",
                                            "url"
                                        ],
                                        "type": "object"
                                    },
                                    "type": {
                                        "description": "Unsupported action type",
                                        "enum": [
                                            "http",
                                            "query",
                                            "implicit"
                                        ],
                                        "type": "string"
                                    },
                                    "visualization_settings": {
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "name",
                                    "model_id"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/action/",
                "tags": [
                    "/api/action"
                ]
            }
        },
        "/api/action/{action-id}": {
            "delete": {
                "description": "Delete an Action.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "action-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/action/{action-id}",
                "tags": [
                    "/api/action"
                ]
            },
            "get": {
                "description": "Fetch an Action.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "action-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/action/{action-id}",
                "tags": [
                    "/api/action"
                ]
            }
        },
        "/api/action/{action-id}/execute": {
            "get": {
                "description": "Fetches the values for filling in execution parameters. Pass PK parameters and values to select.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "action-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/action/{action-id}/execute",
                "tags": [
                    "/api/action"
                ]
            }
        },
        "/api/action/{id}": {
            "put": {
                "description": "Update an Action.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "archived": {
                                        "type": "boolean"
                                    },
                                    "database_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "dataset_query": {
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "error_handle": {
                                        "allOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "description": "must be a valid json-query, something like '.item.title'"
                                            }
                                        ]
                                    },
                                    "kind": {
                                        "description": "Unsupported implicit action kind",
                                        "enum": [
                                            "row/create",
                                            "row/update",
                                            "row/delete",
                                            "bulk/create",
                                            "bulk/update",
                                            "bulk/delete"
                                        ],
                                        "type": "string"
                                    },
                                    "model_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "parameter_mappings": {
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "parameters": {
                                        "items": {
                                            "properties": {},
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "response_handle": {
                                        "allOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "description": "must be a valid json-query, something like '.item.title'"
                                            }
                                        ]
                                    },
                                    "template": {
                                        "additionalProperties": false,
                                        "properties": {
                                            "body": {
                                                "type": "string"
                                            },
                                            "headers": {
                                                "type": "string"
                                            },
                                            "method": {
                                                "enum": [
                                                    "GET",
                                                    "POST",
                                                    "PUT",
                                                    "DELETE",
                                                    "PATCH"
                                                ],
                                                "type": "string"
                                            },
                                            "parameter_mappings": {
                                                "type": "object"
                                            },
                                            "parameters": {
                                                "items": {
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "url": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "method",
                                            "url"
                                        ],
                                        "type": "object"
                                    },
                                    "type": {
                                        "description": "Unsupported action type",
                                        "enum": [
                                            "http",
                                            "query",
                                            "implicit"
                                        ],
                                        "type": "string"
                                    },
                                    "visualization_settings": {
                                        "properties": {},
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/action/{id}",
                "tags": [
                    "/api/action"
                ]
            }
        },
        "/api/action/{id}/execute": {
            "post": {
                "description": "Execute the Action.\n\n   `parameters` should be the mapped dashboard parameters with values.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "optional": true,
                                "properties": {
                                    "parameters": {
                                        "additionalProperties": {},
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/action/{id}/execute",
                "tags": [
                    "/api/action"
                ]
            }
        },
        "/api/action/{id}/public_link": {
            "delete": {
                "description": "Delete the publicly-accessible link to this Dashboard.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/action/{id}/public_link",
                "tags": [
                    "/api/action"
                ]
            },
            "post": {
                "description": "Generate publicly-accessible links for this Action. Returns UUID to be used in public links. (If this\n  Action has already been shared, it will return the existing public link rather than creating a new one.) Public\n  sharing must be enabled.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/action/{id}/public_link",
                "tags": [
                    "/api/action"
                ]
            }
        },
        "/api/action/public": {
            "get": {
                "description": "Fetch a list of Actions with public UUIDs. These actions are publicly-accessible *if* public sharing is enabled.",
                "parameters": [],
                "summary": "GET /api/action/public",
                "tags": [
                    "/api/action"
                ]
            }
        },
        "/api/activity/most_recently_viewed_dashboard": {
            "get": {
                "description": "Get the most recently viewed dashboard for the current user. Returns a 204 if the user has not viewed any dashboards\n   in the last 24 hours.",
                "parameters": [],
                "summary": "GET /api/activity/most_recently_viewed_dashboard",
                "tags": [
                    "/api/activity"
                ]
            }
        },
        "/api/activity/popular_items": {
            "get": {
                "description": "Get the list of 5 popular things on the instance. Query takes 8 and limits to 5 so that if it finds anything\n  archived, deleted, etc it can usually still get 5. ",
                "parameters": [],
                "summary": "GET /api/activity/popular_items",
                "tags": [
                    "/api/activity"
                ]
            }
        },
        "/api/activity/recent_views": {
            "get": {
                "description": "Get a list of 100 models (cards, models, tables, dashboards, and collections) that the current user has been viewing most\n  recently. Return a maximum of 20 model of each, if they've looked at at least 20.",
                "parameters": [],
                "summary": "GET /api/activity/recent_views",
                "tags": [
                    "/api/activity"
                ]
            }
        },
        "/api/activity/recents": {
            "get": {
                "description": "Get a list of recent items the current user has been viewing most recently under the `:recents` key.\n  Allows for filtering by context: views or selections",
                "parameters": [
                    {
                        "in": "query",
                        "name": "context",
                        "required": true,
                        "schema": {
                            "items": {
                                "enum": [
                                    "selections",
                                    "views"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    }
                ],
                "summary": "GET /api/activity/recents",
                "tags": [
                    "/api/activity"
                ]
            },
            "post": {
                "description": "Adds a model to the list of recently selected items.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "context": {
                                        "enum": [
                                            "selection"
                                        ],
                                        "type": "string"
                                    },
                                    "model": {
                                        "enum": [
                                            "card",
                                            "dataset",
                                            "metric",
                                            "dashboard",
                                            "table",
                                            "collection"
                                        ],
                                        "type": "string"
                                    },
                                    "model_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "model",
                                    "model_id",
                                    "context"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/activity/recents",
                "tags": [
                    "/api/activity"
                ]
            }
        },
        "/api/alert/": {
            "get": {
                "description": "Fetch alerts which the current user has created or will receive, or all alerts if the user is an admin.\n  The optional `user_id` will return alerts created by the corresponding user, but is ignored for non-admin users.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "archived",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/alert/",
                "tags": [
                    "/api/alert"
                ]
            }
        },
        "/api/alert/{id}": {
            "get": {
                "description": "Fetch an alert by ID",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/alert/{id}",
                "tags": [
                    "/api/alert"
                ]
            }
        },
        "/api/alert/{id}/subscription": {
            "delete": {
                "description": "For users to unsubscribe themselves from the given alert.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/alert/{id}/subscription",
                "tags": [
                    "/api/alert"
                ]
            }
        },
        "/api/api-key/": {
            "get": {
                "description": "Get a list of API keys with the default scope. Non-paginated.",
                "parameters": [],
                "summary": "GET /api/api-key/",
                "tags": [
                    "/api/api-key"
                ]
            },
            "post": {
                "description": "Create a new API key (and an associated `User`) with the provided name and group ID.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "group_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "required": [
                                    "group_id",
                                    "name"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/api-key/",
                "tags": [
                    "/api/api-key"
                ]
            }
        },
        "/api/api-key/{id}": {
            "delete": {
                "description": "Delete an ApiKey",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/api-key/{id}",
                "tags": [
                    "/api/api-key"
                ]
            },
            "put": {
                "description": "Update an API key by changing its group and/or its name",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "group_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/api-key/{id}",
                "tags": [
                    "/api/api-key"
                ]
            }
        },
        "/api/api-key/{id}/regenerate": {
            "put": {
                "description": "Regenerate an API Key",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "PUT /api/api-key/{id}/regenerate",
                "tags": [
                    "/api/api-key"
                ]
            }
        },
        "/api/api-key/count": {
            "get": {
                "description": "Get the count of API keys in the DB with the default scope.",
                "parameters": [],
                "summary": "GET /api/api-key/count",
                "tags": [
                    "/api/api-key"
                ]
            }
        },
        "/api/automagic-dashboards/{entity}/{entity-id-or-query}": {
            "get": {
                "description": "Return an automagic dashboard for entity `entity` with id `id`.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "adhoc",
                                "transform",
                                "table",
                                "question",
                                "field",
                                "segment",
                                "metric",
                                "model"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "show",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "const": "all"
                                },
                                {
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            ]
                        }
                    }
                ],
                "summary": "GET /api/automagic-dashboards/{entity}/{entity-id-or-query}",
                "tags": [
                    "/api/automagic-dashboards"
                ]
            }
        },
        "/api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}": {
            "get": {
                "description": "Return an automagic dashboard analyzing cell in automagic dashboard for entity `entity` defined by query\n  `cell-query`.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "adhoc",
                                "transform",
                                "table",
                                "question",
                                "field",
                                "segment",
                                "metric",
                                "model"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "entity-id-or-query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "form-encoded base-64-encoded JSON",
                        "in": "path",
                        "name": "cell-query",
                        "required": true,
                        "schema": {}
                    },
                    {
                        "description": "invalid show value",
                        "in": "query",
                        "name": "show",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "all"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            ]
                        }
                    }
                ],
                "summary": "GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}",
                "tags": [
                    "/api/automagic-dashboards"
                ]
            }
        },
        "/api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/compare/{comparison-entity}/{comparison-entity-id-or-query}": {
            "get": {
                "description": "Return an automagic comparison dashboard for cell in automagic dashboard for entity `entity`\n   with id `id` defined by query `cell-query`; compared with entity `comparison-entity` with id\n   `comparison-entity-id-or-query.`.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "adhoc",
                                "transform",
                                "table",
                                "question",
                                "field",
                                "segment",
                                "metric",
                                "model"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "entity-id-or-query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "form-encoded base-64-encoded JSON",
                        "in": "path",
                        "name": "cell-query",
                        "required": true,
                        "schema": {}
                    },
                    {
                        "description": "Invalid comparison entity type. Can only be one of \"table\", \"segment\", or \"adhoc\"",
                        "in": "path",
                        "name": "comparison-entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "segment",
                                "adhoc",
                                "table"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "invalid show value",
                        "in": "query",
                        "name": "show",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "all"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            ]
                        }
                    }
                ],
                "summary": "GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/compare/{comparison-entity}/{comparison-entity-id-or-query}",
                "tags": [
                    "/api/automagic-dashboards"
                ]
            }
        },
        "/api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/rule/{prefix}/{dashboard-template}": {
            "get": {
                "description": "Return an automagic dashboard analyzing cell in question with id `id` defined by query `cell-query` using\n  dashboard-template `dashboard-template`.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "adhoc",
                                "transform",
                                "table",
                                "question",
                                "field",
                                "segment",
                                "metric",
                                "model"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "entity-id-or-query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "prefix",
                        "required": true,
                        "schema": {}
                    },
                    {
                        "description": "invalid value for dashboard template name",
                        "in": "path",
                        "name": "dashboard-template",
                        "required": true,
                        "schema": {}
                    },
                    {
                        "description": "form-encoded base-64-encoded JSON",
                        "in": "path",
                        "name": "cell-query",
                        "required": true,
                        "schema": {}
                    },
                    {
                        "description": "invalid show value",
                        "in": "query",
                        "name": "show",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "all"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            ]
                        }
                    }
                ],
                "summary": "GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/rule/{prefix}/{dashboard-template}",
                "tags": [
                    "/api/automagic-dashboards"
                ]
            }
        },
        "/api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/rule/{prefix}/{dashboard-template}/compare/{comparison-entity}/{comparison-entity-id-or-query}": {
            "get": {
                "description": "Return an automagic comparison dashboard for cell in automagic dashboard for entity `entity`\n   with id `id` defined by query `cell-query` using dashboard-template `dashboard-template`; compared with entity\n   `comparison-entity` with id `comparison-entity-id-or-query.`.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "adhoc",
                                "transform",
                                "table",
                                "question",
                                "field",
                                "segment",
                                "metric",
                                "model"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "entity-id-or-query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "prefix",
                        "required": true,
                        "schema": {}
                    },
                    {
                        "description": "invalid value for dashboard template name",
                        "in": "path",
                        "name": "dashboard-template",
                        "required": true,
                        "schema": {}
                    },
                    {
                        "description": "form-encoded base-64-encoded JSON",
                        "in": "path",
                        "name": "cell-query",
                        "required": true,
                        "schema": {}
                    },
                    {
                        "description": "Invalid comparison entity type. Can only be one of \"table\", \"segment\", or \"adhoc\"",
                        "in": "path",
                        "name": "comparison-entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "segment",
                                "adhoc",
                                "table"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "invalid show value",
                        "in": "query",
                        "name": "show",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "all"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            ]
                        }
                    }
                ],
                "summary": "GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/rule/{prefix}/{dashboard-template}/compare/{comparison-entity}/{comparison-entity-id-or-query}",
                "tags": [
                    "/api/automagic-dashboards"
                ]
            }
        },
        "/api/automagic-dashboards/{entity}/{entity-id-or-query}/compare/{comparison-entity}/{comparison-entity-id-or-query}": {
            "get": {
                "description": "Return an automagic comparison dashboard for entity `entity` with id `id` compared with entity `comparison-entity`\n  with id `comparison-entity-id-or-query.`",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "entity-id-or-query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "adhoc",
                                "transform",
                                "table",
                                "question",
                                "field",
                                "segment",
                                "metric",
                                "model"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Invalid comparison entity type. Can only be one of \"table\", \"segment\", or \"adhoc\"",
                        "in": "path",
                        "name": "comparison-entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "segment",
                                "adhoc",
                                "table"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "invalid show value",
                        "in": "query",
                        "name": "show",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "all"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            ]
                        }
                    }
                ],
                "summary": "GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/compare/{comparison-entity}/{comparison-entity-id-or-query}",
                "tags": [
                    "/api/automagic-dashboards"
                ]
            }
        },
        "/api/automagic-dashboards/{entity}/{entity-id-or-query}/query_metadata": {
            "get": {
                "description": "Return all metadata for an automagic dashboard for entity `entity` with id `id`.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "adhoc",
                                "transform",
                                "table",
                                "question",
                                "field",
                                "segment",
                                "metric",
                                "model"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/query_metadata",
                "tags": [
                    "/api/automagic-dashboards"
                ]
            }
        },
        "/api/automagic-dashboards/{entity}/{entity-id-or-query}/rule/{prefix}/{dashboard-template}": {
            "get": {
                "description": "Return an automagic dashboard for entity `entity` with id `id` using dashboard-template `dashboard-template`.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "adhoc",
                                "transform",
                                "table",
                                "question",
                                "field",
                                "segment",
                                "metric",
                                "model"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "entity-id-or-query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "prefix",
                        "required": true,
                        "schema": {}
                    },
                    {
                        "description": "invalid value for dashboard template name",
                        "in": "path",
                        "name": "dashboard-template",
                        "required": true,
                        "schema": {}
                    },
                    {
                        "description": "invalid show value",
                        "in": "query",
                        "name": "show",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "all"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            ]
                        }
                    }
                ],
                "summary": "GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/rule/{prefix}/{dashboard-template}",
                "tags": [
                    "/api/automagic-dashboards"
                ]
            }
        },
        "/api/automagic-dashboards/{entity}/{entity-id-or-query}/rule/{prefix}/{dashboard-template}/compare/{comparison-entity}/{comparison-entity-id-or-query}": {
            "get": {
                "description": "Return an automagic comparison dashboard for entity `entity` with id `id` using dashboard-template\n  `dashboard-template`; compared with entity `comparison-entity` with id `comparison-entity-id-or-query.`.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "adhoc",
                                "transform",
                                "table",
                                "question",
                                "field",
                                "segment",
                                "metric",
                                "model"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "entity-id-or-query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "prefix",
                        "required": true,
                        "schema": {}
                    },
                    {
                        "description": "invalid value for dashboard template name",
                        "in": "path",
                        "name": "dashboard-template",
                        "required": true,
                        "schema": {}
                    },
                    {
                        "description": "Invalid comparison entity type. Can only be one of \"table\", \"segment\", or \"adhoc\"",
                        "in": "path",
                        "name": "comparison-entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "segment",
                                "adhoc",
                                "table"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "invalid show value",
                        "in": "query",
                        "name": "show",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "all"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            ]
                        }
                    }
                ],
                "summary": "GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/rule/{prefix}/{dashboard-template}/compare/{comparison-entity}/{comparison-entity-id-or-query}",
                "tags": [
                    "/api/automagic-dashboards"
                ]
            }
        },
        "/api/automagic-dashboards/database/{id}/candidates": {
            "get": {
                "description": "Return a list of candidates for automagic dashboards ordered by interestingness.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/automagic-dashboards/database/{id}/candidates",
                "tags": [
                    "/api/automagic-dashboards"
                ]
            }
        },
        "/api/automagic-dashboards/model_index/{model-index-id}/primary_key/{pk-id}": {
            "get": {
                "description": "Return an automagic dashboard for an entity detail specified by `entity`\n  with id `id` and a primary key of `indexed-value`.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "model-index-id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pk-id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/automagic-dashboards/model_index/{model-index-id}/primary_key/{pk-id}",
                "tags": [
                    "/api/automagic-dashboards"
                ]
            }
        },
        "/api/bookmark/": {
            "get": {
                "description": "Fetch all bookmarks for the user",
                "parameters": [],
                "summary": "GET /api/bookmark/",
                "tags": [
                    "/api/bookmark"
                ]
            }
        },
        "/api/bookmark/{model}/{id}": {
            "delete": {
                "description": "Delete a bookmark. Will delete a bookmark assigned to the user making the request by model and id.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": {
                            "enum": [
                                "card",
                                "dashboard",
                                "collection"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/bookmark/{model}/{id}",
                "tags": [
                    "/api/bookmark"
                ]
            },
            "post": {
                "description": "Create a new bookmark for user.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": {
                            "enum": [
                                "card",
                                "dashboard",
                                "collection"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/bookmark/{model}/{id}",
                "tags": [
                    "/api/bookmark"
                ]
            }
        },
        "/api/bookmark/ordering": {
            "put": {
                "description": "Sets the order of bookmarks for user.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "orderings": {
                                        "items": {
                                            "properties": {
                                                "item_id": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "type": {
                                                    "enum": [
                                                        "card",
                                                        "dashboard",
                                                        "collection"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "type",
                                                "item_id"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "orderings"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/bookmark/ordering",
                "tags": [
                    "/api/bookmark"
                ]
            }
        },
        "/api/cache/": {
            "delete": {
                "description": "Delete cache configurations.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "model": {
                                        "enum": [
                                            "root",
                                            "database",
                                            "dashboard",
                                            "question"
                                        ],
                                        "type": "string"
                                    },
                                    "model_id": {
                                        "items": {
                                            "description": "value must be an integer greater or equal to than zero.",
                                            "minimum": 0,
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "model",
                                    "model_id"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "DELETE /api/cache/",
                "tags": [
                    "/api/cache"
                ]
            },
            "get": {
                "description": "Return cache configuration.",
                "parameters": [
                    {
                        "description": "Type of model",
                        "in": "query",
                        "name": "model",
                        "required": true,
                        "schema": {
                            "default": [
                                "root"
                            ],
                            "items": {
                                "enum": [
                                    "root",
                                    "database",
                                    "dashboard",
                                    "question"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "description": "Collection id to filter results. Returns everything if not supplied.",
                        "in": "query",
                        "name": "collection",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Model id to get configuration for.",
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/cache/",
                "tags": [
                    "/api/cache"
                ]
            },
            "put": {
                "description": "Store cache configuration.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "model": {
                                        "enum": [
                                            "root",
                                            "database",
                                            "dashboard",
                                            "question"
                                        ],
                                        "type": "string"
                                    },
                                    "model_id": {
                                        "description": "value must be an integer greater or equal to than zero.",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "strategy": {
                                        "$ref": "#/components/schemas/metabase.api.cache~1cache-strategy"
                                    }
                                },
                                "required": [
                                    "model",
                                    "model_id",
                                    "strategy"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/cache/",
                "tags": [
                    "/api/cache"
                ]
            }
        },
        "/api/cache/invalidate": {
            "post": {
                "description": "Invalidate cache entries.\n\n  Use it like `/api/cache/invalidate?database=1&dashboard=15` (any number of database/dashboard/question can be\n  supplied).\n\n  `&include=overrides` controls whenever you want to invalidate cache for a specific cache configuration without\n  touching all nested configurations, or you want your invalidation to trickle down to every card.",
                "parameters": [
                    {
                        "description": "All cache configuration overrides should invalidate cache too",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "schema": {
                            "const": "overrides"
                        }
                    },
                    {
                        "description": "A list of database ids",
                        "in": "query",
                        "name": "database",
                        "required": false,
                        "schema": {
                            "items": {
                                "description": "value must be an integer greater or equal to than zero.",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "description": "A list of dashboard ids",
                        "in": "query",
                        "name": "dashboard",
                        "required": false,
                        "schema": {
                            "items": {
                                "description": "value must be an integer greater or equal to than zero.",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "description": "A list of question ids",
                        "in": "query",
                        "name": "question",
                        "required": false,
                        "schema": {
                            "items": {
                                "description": "value must be an integer greater or equal to than zero.",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    }
                ],
                "summary": "POST /api/cache/invalidate",
                "tags": [
                    "/api/cache"
                ]
            }
        },
        "/api/card/": {
            "get": {
                "description": "Get all the Cards. Option filter param `f` can be used to change the set of Cards that are returned; default is\n  `all`, but other options include `mine`, `bookmarked`, `database`, `table`, `using_model`, `using_metric`,\n  `using_segment`, and `archived`. See corresponding implementation functions above for the specific behavior\n  of each filter option. :card_index:",
                "parameters": [
                    {
                        "in": "query",
                        "name": "f",
                        "required": true,
                        "schema": {
                            "default": "all",
                            "enum": [
                                "archived",
                                "table",
                                "using_model",
                                "bookmarked",
                                "using_segment",
                                "all",
                                "mine",
                                "using_metric",
                                "database"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "model_id",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/card/",
                "tags": [
                    "/api/card"
                ]
            },
            "post": {
                "description": "Create a new `Card`. Card `type` can be `question`, `metric`, or `model`.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "cache_ttl": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "collection_position": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "dashboard_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "dashboard_tab_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "dataset_query": {
                                        "description": "Value must be a map.",
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "display": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "entity_id": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "parameter_mappings": {
                                        "items": {
                                            "description": "parameter_mapping must be a map with :parameter_id and :target keys",
                                            "properties": {
                                                "card_id": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "parameter_id": {
                                                    "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                    "description": "value must be a non-blank string."
                                                },
                                                "target": {}
                                            },
                                            "required": [
                                                "parameter_id",
                                                "target"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "parameters": {
                                        "items": {
                                            "description": "parameter must be a map with :id and :type keys",
                                            "properties": {
                                                "default": {},
                                                "id": {
                                                    "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                    "description": "value must be a non-blank string."
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "sectionId": {
                                                    "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                    "description": "value must be a non-blank string."
                                                },
                                                "slug": {
                                                    "type": "string"
                                                },
                                                "temporal_units": {
                                                    "items": {
                                                        "$ref": "#/components/schemas/metabase.lib.schema.temporal-bucketing~1unit"
                                                    },
                                                    "type": "array"
                                                },
                                                "type": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "values_source_config": {
                                                    "properties": {
                                                        "card_id": {
                                                            "description": "value must be an integer greater than zero.",
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "label_field": {
                                                            "description": "value must an array with :field id-or-name and an options map"
                                                        },
                                                        "value_field": {
                                                            "description": "value must an array with :field id-or-name and an options map"
                                                        },
                                                        "values": {}
                                                    },
                                                    "type": "object"
                                                },
                                                "values_source_type": {
                                                    "enum": [
                                                        "static-list",
                                                        "card",
                                                        null
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "type"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "result_metadata": {
                                        "$ref": "#/components/schemas/metabase.analyze.query-results~1ResultsMetadata"
                                    },
                                    "type": {
                                        "$ref": "#/components/schemas/metabase.api.card~1card-type"
                                    },
                                    "visualization_settings": {
                                        "description": "Value must be a map.",
                                        "properties": {},
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "name",
                                    "dataset_query",
                                    "display",
                                    "visualization_settings"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/card/",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/{card-id}/params/{param-key}/search/{query}": {
            "get": {
                "description": "Fetch possible values of the parameter whose ID is `:param-key` that contain `:query`.\n\n    ;; fetch values for Card 1 parameter 'abc' that contain 'Orange';\n     GET /api/card/1/params/abc/search/Orange\n\n  Currently limited to first 1000 results.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "param-key",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/card/{card-id}/params/{param-key}/search/{query}",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/{card-id}/params/{param-key}/values": {
            "get": {
                "description": "Fetch possible values of the parameter whose ID is `:param-key`.\n\n    ;; fetch values for Card 1 parameter 'abc' that are possible\n    GET /api/card/1/params/abc/values",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "param-key",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/card/{card-id}/params/{param-key}/values",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/{card-id}/public_link": {
            "delete": {
                "description": "Delete the publicly-accessible link to this Card.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/card/{card-id}/public_link",
                "tags": [
                    "/api/card"
                ]
            },
            "post": {
                "description": "Generate publicly-accessible links for this Card. Returns UUID to be used in public links. (If this Card has\n  already been shared, it will return the existing public link rather than creating a new one.)  Public sharing must\n  be enabled.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/card/{card-id}/public_link",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/{card-id}/query": {
            "post": {
                "description": "Run the query associated with a Card.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "collection_preview": {
                                        "type": "boolean"
                                    },
                                    "dashboard_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "ignore_cache": {
                                        "default": false,
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "ignore_cache"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/card/{card-id}/query",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/{card-id}/query/{export-format}": {
            "post": {
                "description": "Run the query associated with a Card, and return its results as a file in the specified format.\n\n  `parameters`, `pivot-results?` and `format-rows?` should be passed as application/x-www-form-urlencoded form content\n  or json in the body. This is because this endpoint is normally used to power 'Download Results' buttons that use\n  HTML `form` actions).",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "export-format",
                        "required": true,
                        "schema": {
                            "enum": [
                                "csv",
                                "api",
                                "xlsx",
                                "json"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "format_rows": {
                                        "default": false,
                                        "type": "boolean"
                                    },
                                    "parameters": {
                                        "items": {
                                            "additionalProperties": {},
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "pivot_results": {
                                        "default": false,
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "format_rows",
                                    "pivot_results"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/card/{card-id}/query/{export-format}",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/{id}": {
            "delete": {
                "description": "Hard delete a Card. To soft delete, use `PUT /api/card/:id`",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/card/{id}",
                "tags": [
                    "/api/card"
                ]
            },
            "get": {
                "description": "Get `Card` with ID.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "ignore_view",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "context",
                        "required": false,
                        "schema": {
                            "enum": [
                                "collection"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/card/{id}",
                "tags": [
                    "/api/card"
                ]
            },
            "put": {
                "description": "Update a `Card`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "delete_old_dashcards",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "archived": {
                                        "type": "boolean"
                                    },
                                    "cache_ttl": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "collection_position": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "collection_preview": {
                                        "type": "boolean"
                                    },
                                    "dashboard_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "dashboard_tab_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "dataset_query": {
                                        "description": "Value must be a map.",
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "display": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "embedding_params": {
                                        "additionalProperties": {
                                            "enum": [
                                                "disabled",
                                                "enabled",
                                                "locked"
                                            ],
                                            "type": "string"
                                        },
                                        "description": "value must be a valid embedding params map.",
                                        "type": "object"
                                    },
                                    "enable_embedding": {
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "parameters": {
                                        "items": {
                                            "description": "parameter must be a map with :id and :type keys",
                                            "properties": {
                                                "default": {},
                                                "id": {
                                                    "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                    "description": "value must be a non-blank string."
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "sectionId": {
                                                    "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                    "description": "value must be a non-blank string."
                                                },
                                                "slug": {
                                                    "type": "string"
                                                },
                                                "temporal_units": {
                                                    "items": {
                                                        "$ref": "#/components/schemas/metabase.lib.schema.temporal-bucketing~1unit"
                                                    },
                                                    "type": "array"
                                                },
                                                "type": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "values_source_config": {
                                                    "properties": {
                                                        "card_id": {
                                                            "description": "value must be an integer greater than zero.",
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "label_field": {
                                                            "description": "value must an array with :field id-or-name and an options map"
                                                        },
                                                        "value_field": {
                                                            "description": "value must an array with :field id-or-name and an options map"
                                                        },
                                                        "values": {}
                                                    },
                                                    "type": "object"
                                                },
                                                "values_source_type": {
                                                    "enum": [
                                                        "static-list",
                                                        "card",
                                                        null
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "type"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "result_metadata": {
                                        "$ref": "#/components/schemas/metabase.analyze.query-results~1ResultsMetadata"
                                    },
                                    "type": {
                                        "$ref": "#/components/schemas/metabase.api.card~1card-type"
                                    },
                                    "visualization_settings": {
                                        "description": "Value must be a map.",
                                        "properties": {},
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/card/{id}",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/{id}/copy": {
            "post": {
                "description": "Copy a `Card`, with the new name 'Copy of _name_'",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/card/{id}/copy",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/{id}/dashboards": {
            "get": {
                "description": "Get a list of `{:name ... :id ...}` pairs for all the dashboards this card appears in.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/card/{id}/dashboards",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/{id}/query_metadata": {
            "get": {
                "description": "Get all of the required query metadata for a card.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/card/{id}/query_metadata",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/{id}/series": {
            "get": {
                "description": "Fetches a list of compatible series with the card with id `card_id`.\n\n  - `last_cursor` with value is the id of the last card from the previous page to fetch the next page.\n  - `query` to search card by name.\n  - `exclude_ids` to filter out a list of card ids",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "last_cursor",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "exclude_ids",
                        "required": false,
                        "schema": {}
                    }
                ],
                "summary": "GET /api/card/{id}/series",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/collections": {
            "post": {
                "description": "Bulk update endpoint for Card Collections. Move a set of `Cards` with `card_ids` into a `Collection` with\n  `collection_id`, or remove them from any Collections by passing a `null` `collection_id`.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "card_ids": {
                                        "items": {
                                            "description": "value must be an integer greater than zero.",
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "card_ids"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/card/collections",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/embeddable": {
            "get": {
                "description": "Fetch a list of Cards where `enable_embedding` is `true`. The cards can be embedded using the embedding endpoints\n  and a signed JWT.",
                "parameters": [],
                "summary": "GET /api/card/embeddable",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/from-csv": {
            "post": {
                "description": "Create a table and model populated with the values from the attached CSV. Returns the model ID if successful.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "collection_id": {
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "file": {
                                        "properties": {
                                            "filename": {
                                                "type": "string"
                                            },
                                            "tempfile": {}
                                        },
                                        "required": [
                                            "filename",
                                            "tempfile"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "file"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/card/from-csv",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/pivot/{card-id}/query": {
            "post": {
                "description": "Run the query associated with a Card.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ignore_cache": {
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/card/pivot/{card-id}/query",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/card/public": {
            "get": {
                "description": "Fetch a list of Cards with public UUIDs. These cards are publicly-accessible *if* public sharing is enabled.",
                "parameters": [],
                "summary": "GET /api/card/public",
                "tags": [
                    "/api/card"
                ]
            }
        },
        "/api/cards/dashboards": {
            "post": {
                "description": "Get the dashboards that multiple cards appear in. The response is a sequence of maps, each of which has a `card_id`\n  and `dashboards`. `dashboard` may include an `:error` key, either `:unreadable-dashboard` or\n  `:unwritable-dashboard`. In the case of an `unreadable-dashboard` the dashboard details (name, ID) will NOT be\n  present.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "card_ids": {
                                        "items": {
                                            "description": "value must be an integer greater than zero.",
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "card_ids"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/cards/dashboards",
                "tags": [
                    "/api/cards"
                ]
            }
        },
        "/api/cards/move": {
            "post": {
                "description": "Moves a number of Cards to a single collection or dashboard.\n\n  For now, just either succeed or fail as a batch - we can think more about error handling later down the road.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "card_ids": {
                                        "items": {
                                            "description": "value must be an integer greater than zero.",
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "dashboard_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "card_ids"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/cards/move",
                "tags": [
                    "/api/cards"
                ]
            }
        },
        "/api/channel/": {
            "get": {
                "description": "Get all channels",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "include_inactive": {
                                        "default": false,
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "GET /api/channel/",
                "tags": [
                    "/api/channel"
                ]
            },
            "post": {
                "description": "Create a channel",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "active": {
                                        "default": true,
                                        "type": "boolean"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "details": {
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "type": {
                                        "description": "Must be a namespaced channel. E.g: channel/http"
                                    }
                                },
                                "required": [
                                    "name",
                                    "type",
                                    "details"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/channel/",
                "tags": [
                    "/api/channel"
                ]
            }
        },
        "/api/channel/{id}": {
            "get": {
                "description": "Get a channel",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/channel/{id}",
                "tags": [
                    "/api/channel"
                ]
            },
            "put": {
                "description": "Update a channel",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "active": {
                                        "type": "boolean"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "details": {
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "type": {
                                        "description": "Must be a namespaced channel. E.g: channel/http"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/channel/{id}",
                "tags": [
                    "/api/channel"
                ]
            }
        },
        "/api/channel/test": {
            "post": {
                "description": "Test a channel connection",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "details": {
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "type": {
                                        "description": "Must be a namespaced channel. E.g: channel/http"
                                    }
                                },
                                "required": [
                                    "type",
                                    "details"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/channel/test",
                "tags": [
                    "/api/channel"
                ]
            }
        },
        "/api/cloud-migration/": {
            "get": {
                "description": "Get the latest cloud migration, if any.",
                "parameters": [],
                "summary": "GET /api/cloud-migration/",
                "tags": [
                    "/api/cloud-migration"
                ]
            },
            "post": {
                "description": "Initiate a new cloud migration.",
                "parameters": [],
                "summary": "POST /api/cloud-migration/",
                "tags": [
                    "/api/cloud-migration"
                ]
            }
        },
        "/api/cloud-migration/cancel": {
            "put": {
                "description": "Cancel any ongoing cloud migrations, if any.",
                "parameters": [],
                "summary": "PUT /api/cloud-migration/cancel",
                "tags": [
                    "/api/cloud-migration"
                ]
            }
        },
        "/api/collection/": {
            "get": {
                "description": "Fetch a list of all Collections that the current user has read permissions for (`:can_write` is returned as an\n  additional property of each Collection so you can tell which of these you have write permissions for.)\n\n  By default, this returns non-archived Collections, but instead you can show archived ones by passing\n  `?archived=true`.\n\n  By default, admin users will see all collections. To hide other user's collections pass in\n  `?exclude-other-user-collections=true`.\n\n  If personal-only is `true`, then return only personal collections where `personal_owner_id` is not `nil`.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "archived",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "exclude-other-user-collections",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "namespace",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "personal-only",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/collection/",
                "tags": [
                    "/api/collection"
                ]
            },
            "post": {
                "description": "Create a new Collection.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "authority_level": {
                                        "enum": [
                                            "official"
                                        ],
                                        "type": "string"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "namespace": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "parent_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/collection/",
                "tags": [
                    "/api/collection"
                ]
            }
        },
        "/api/collection/{id}": {
            "get": {
                "description": "Fetch a specific Collection with standard details added",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/collection/{id}",
                "tags": [
                    "/api/collection"
                ]
            },
            "put": {
                "description": "Modify an existing Collection, including archiving or unarchiving it, or moving it.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "archived": {
                                        "default": false,
                                        "type": "boolean"
                                    },
                                    "authority_level": {
                                        "enum": [
                                            "official"
                                        ],
                                        "type": "string"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "parent_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "required": [],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/collection/{id}",
                "tags": [
                    "/api/collection"
                ]
            }
        },
        "/api/collection/{id}/dashboard-question-candidates": {
            "get": {
                "description": "Find cards in this collection that can be moved into dashboards in this collection.\n\n  To be eligible, a card must only appear in one dashboard (which is also in this collection), and must not already be a\n  dashboard question.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/collection/{id}/dashboard-question-candidates",
                "tags": [
                    "/api/collection"
                ]
            }
        },
        "/api/collection/{id}/items": {
            "get": {
                "description": "Fetch a specific Collection's items with the following options:\n\n  *  `models` - only include objects of a specific set of `models`. If unspecified, returns objects of all models\n  *  `archived` - when `true`, return archived objects *instead* of unarchived ones. Defaults to `false`.\n  *  `pinned_state` - when `is_pinned`, return pinned objects only.\n                   when `is_not_pinned`, return non pinned objects only.\n                   when `all`, return everything. By default returns everything.\n\n  Note that this endpoint should return results in a similar shape to `/api/dashboard/:id/items`, so if this is\n  changed, that should too.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "models",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "dashboard",
                                    "dataset",
                                    "no_models",
                                    "timeline",
                                    "snippet",
                                    "collection",
                                    "pulse",
                                    "metric",
                                    "card"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "in": "query",
                        "name": "archived",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pinned_state",
                        "required": false,
                        "schema": {
                            "enum": [
                                "is_not_pinned",
                                "is_pinned",
                                "all"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort_column",
                        "required": false,
                        "schema": {
                            "enum": [
                                "model",
                                "name",
                                "last_edited_by",
                                "last_edited_at"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort_direction",
                        "required": false,
                        "schema": {
                            "enum": [
                                "desc",
                                "asc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "official_collections_first",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "show_dashboard_questions",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/collection/{id}/items",
                "tags": [
                    "/api/collection"
                ]
            }
        },
        "/api/collection/{id}/move-dashboard-question-candidates": {
            "post": {
                "description": "Move candidate cards to the dashboards they appear in.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "optional": true,
                                "properties": {
                                    "card_ids": {
                                        "items": {
                                            "description": "value must be an integer greater than zero.",
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/collection/{id}/move-dashboard-question-candidates",
                "tags": [
                    "/api/collection"
                ]
            }
        },
        "/api/collection/graph": {
            "get": {
                "description": "Fetch a graph of all Collection Permissions.",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "namespace",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/collection/graph",
                "tags": [
                    "/api/collection"
                ]
            },
            "put": {
                "description": "Do a batch update of Collections Permissions by passing in a modified graph. Will overwrite parts of the graph that\n  are present in the request, and leave the rest unchanged.\n\n  If the `force` query parameter is `true`, a `revision` number is not required. The provided graph will be persisted\n  as-is, and has the potential to clobber other writes that happened since the last read.\n\n  If the `skip_graph` query parameter is `true`, it will only return the current revision, not the entire permissions\n  graph.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "skip-graph",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "groups": {
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "namespace": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "revision": {
                                        "description": "value must be an integer.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "groups"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/collection/graph",
                "tags": [
                    "/api/collection"
                ]
            }
        },
        "/api/collection/root": {
            "get": {
                "description": "Return the 'Root' Collection object with standard details added",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "namespace",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/collection/root",
                "tags": [
                    "/api/collection"
                ]
            }
        },
        "/api/collection/root/dashboard-question-candidates": {
            "get": {
                "description": "Find cards in the root collection that can be moved into dashboards in the root collection. (Same as the above\n  endpoint, but for the root collection)",
                "parameters": [],
                "summary": "GET /api/collection/root/dashboard-question-candidates",
                "tags": [
                    "/api/collection"
                ]
            }
        },
        "/api/collection/root/items": {
            "get": {
                "description": "Fetch objects that the current user should see at their root level. As mentioned elsewhere, the 'Root' Collection\n  doesn't actually exist as a row in the application DB: it's simply a virtual Collection where things with no\n  `collection_id` exist. It does, however, have its own set of Permissions.\n\n  This endpoint will actually show objects with no `collection_id` for Users that have Root Collection\n  permissions, but for people without Root Collection perms, we'll just show the objects that have an effective\n  location of `/`.\n\n  This endpoint is intended to power a 'Root Folder View' for the Current User, so regardless you'll see all the\n  top-level objects you're allowed to access.\n\n  By default, this will show the 'normal' Collections namespace; to view a different Collections namespace, such as\n  `snippets`, you can pass the `?namespace=` parameter.\n\n  Note that this endpoint should return results in a similar shape to `/api/dashboard/:id/items`, so if this is\n  changed, that should too.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "models",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "dashboard",
                                    "dataset",
                                    "no_models",
                                    "timeline",
                                    "snippet",
                                    "collection",
                                    "pulse",
                                    "metric",
                                    "card"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "in": "query",
                        "name": "archived",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "namespace",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pinned_state",
                        "required": false,
                        "schema": {
                            "enum": [
                                "is_not_pinned",
                                "is_pinned",
                                "all"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort_column",
                        "required": false,
                        "schema": {
                            "enum": [
                                "model",
                                "name",
                                "last_edited_by",
                                "last_edited_at"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort_direction",
                        "required": false,
                        "schema": {
                            "enum": [
                                "desc",
                                "asc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "official_collections_first",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "show_dashboard_questions",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/collection/root/items",
                "tags": [
                    "/api/collection"
                ]
            }
        },
        "/api/collection/root/move-dashboard-question-candidates": {
            "post": {
                "description": "Move candidate cards to the dashboards they appear in (for the root collection)",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "optional": true,
                                "properties": {
                                    "card_ids": {
                                        "items": {
                                            "description": "value must be an integer greater than zero.",
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/collection/root/move-dashboard-question-candidates",
                "tags": [
                    "/api/collection"
                ]
            }
        },
        "/api/collection/trash": {
            "get": {
                "description": "Fetch the trash collection, as in `/api/collection/:trash-id`",
                "parameters": [],
                "summary": "GET /api/collection/trash",
                "tags": [
                    "/api/collection"
                ]
            }
        },
        "/api/collection/tree": {
            "get": {
                "description": "Similar to `GET /`, but returns Collections in a tree structure, e.g.\n\n  ```\n  [{:name     \"A\"\n  :below    #{:card :dataset}\n  :children [{:name \"B\"}\n             {:name     \"C\"\n              :here     #{:dataset :card}\n              :below    #{:dataset :card}\n              :children [{:name     \"D\"\n                          :here     #{:dataset}\n                          :children [{:name \"E\"}]}\n                         {:name     \"F\"\n                          :here     #{:card}\n                          :children [{:name \"G\"}]}]}]}\n  {:name \"H\"}]\n  ```\n\n  The here and below keys indicate the types of items at this particular level of the tree (here) and in its\n  subtree (below).\n\n  TODO: for historical reasons this returns Saved Questions AS 'card' AND Models as 'dataset'; we should fix this at\n  some point in the future.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "exclude-archived",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "exclude-other-user-collections",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "namespace",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "shallow",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "collection-id",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/collection/tree",
                "tags": [
                    "/api/collection"
                ]
            }
        },
        "/api/dashboard/": {
            "get": {
                "description": "This endpoint is currently unused by the Metabase frontend and may be out of date with the rest of the application.\n  It only exists for backwards compatibility and may be removed in the future.\n\n  Get `Dashboards`. With filter option `f` (default `all`), restrict results as follows:\n  *  `all`      - Return all Dashboards.\n  *  `mine`     - Return Dashboards created by the current user.\n  *  `archived` - Return Dashboards that have been archived. (By default, these are *excluded*.)",
                "parameters": [
                    {
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "enum": [
                                "all",
                                "mine",
                                "archived"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/dashboard/",
                "tags": [
                    "/api/dashboard"
                ]
            },
            "post": {
                "description": "Create a new Dashboard.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "cache_ttl": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "collection_position": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "parameters": {
                                        "items": {
                                            "description": "parameter must be a map with :id and :type keys",
                                            "properties": {
                                                "default": {},
                                                "id": {
                                                    "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                    "description": "value must be a non-blank string."
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "sectionId": {
                                                    "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                    "description": "value must be a non-blank string."
                                                },
                                                "slug": {
                                                    "type": "string"
                                                },
                                                "temporal_units": {
                                                    "items": {
                                                        "$ref": "#/components/schemas/metabase.lib.schema.temporal-bucketing~1unit"
                                                    },
                                                    "type": "array"
                                                },
                                                "type": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "values_source_config": {
                                                    "properties": {
                                                        "card_id": {
                                                            "description": "value must be an integer greater than zero.",
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "label_field": {
                                                            "description": "value must an array with :field id-or-name and an options map"
                                                        },
                                                        "value_field": {
                                                            "description": "value must an array with :field id-or-name and an options map"
                                                        },
                                                        "values": {}
                                                    },
                                                    "type": "object"
                                                },
                                                "values_source_type": {
                                                    "enum": [
                                                        "static-list",
                                                        "card",
                                                        null
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "type"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/dashboard/",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query": {
            "post": {
                "description": "Run the query associated with a Saved Question (`Card`) in the context of a `Dashboard` that includes it.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashboard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "dashboard_load_id": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "parameters": {
                                        "items": {
                                            "allOf": [
                                                {
                                                    "properties": {
                                                        "id": {
                                                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                            "description": "value must be a non-blank string."
                                                        }
                                                    },
                                                    "required": [
                                                        "id"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "additionalProperties": {},
                                                    "type": "object"
                                                }
                                            ],
                                            "description": "value must be a parameter map with an 'id' key"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query/{export-format}": {
            "post": {
                "description": "Run the query associated with a Saved Question (`Card`) in the context of a `Dashboard` that includes it, and return\n  its results as a file in the specified format.\n\n  `parameters` should be passed as query parameter encoded as a serialized JSON string (this is because this endpoint\n  is normally used to power 'Download Results' buttons that use HTML `form` actions).",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashboard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "export-format",
                        "required": true,
                        "schema": {
                            "enum": [
                                "csv",
                                "api",
                                "xlsx",
                                "json"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "format_rows": {
                                        "default": false,
                                        "type": "boolean"
                                    },
                                    "parameters": {
                                        "anyOf": [
                                            {
                                                "items": {
                                                    "allOf": [
                                                        {
                                                            "properties": {
                                                                "id": {
                                                                    "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                                    "description": "value must be a non-blank string."
                                                                }
                                                            },
                                                            "required": [
                                                                "id"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        {
                                                            "additionalProperties": {},
                                                            "type": "object"
                                                        }
                                                    ],
                                                    "description": "value must be a parameter map with an 'id' key"
                                                },
                                                "type": "array"
                                            },
                                            {
                                                "description": "value must be a valid JSON string.",
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "pivot_results": {
                                        "default": false,
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "format_rows",
                                    "pivot_results"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query/{export-format}",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/execute": {
            "get": {
                "description": "Fetches the values for filling in execution parameters. Pass PK parameters and values to select.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashboard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/execute",
                "tags": [
                    "/api/dashboard"
                ]
            },
            "post": {
                "description": "Execute the associated Action in the context of a `Dashboard` and `DashboardCard` that includes it.\n\n   `parameters` should be the mapped dashboard parameters with values.\n   `extra_parameters` should be the extra, user entered parameter values.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashboard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "parameters": {
                                        "additionalProperties": {},
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/execute",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/{dashboard-id}/public_link": {
            "delete": {
                "description": "Delete the publicly-accessible link to this Dashboard.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashboard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/dashboard/{dashboard-id}/public_link",
                "tags": [
                    "/api/dashboard"
                ]
            },
            "post": {
                "description": "Generate publicly-accessible links for this Dashboard. Returns UUID to be used in public links. (If this\n  Dashboard has already been shared, it will return the existing public link rather than creating a new one.) Public\n  sharing must be enabled.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashboard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/dashboard/{dashboard-id}/public_link",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/{from-dashboard-id}/copy": {
            "post": {
                "description": "Copy a Dashboard.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "from-dashboard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "collection_position": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "is_deep_copy": {
                                        "default": false,
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "required": [],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/dashboard/{from-dashboard-id}/copy",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/{id}": {
            "delete": {
                "description": "Hard delete a Dashboard. To soft delete, use `PUT /api/dashboard/:id`\n\n  This will remove also any questions/models/segments/metrics that use this database.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/dashboard/{id}",
                "tags": [
                    "/api/dashboard"
                ]
            },
            "get": {
                "description": "Get Dashboard with ID.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/dashboard/{id}",
                "tags": [
                    "/api/dashboard"
                ]
            },
            "put": {
                "description": "Update a Dashboard, and optionally the `dashcards` and `tabs` of a Dashboard. The request body should be a JSON object with the same\n  structure as the response from `GET /api/dashboard/:id`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "archived": {
                                        "type": "boolean"
                                    },
                                    "cache_ttl": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "caveats": {
                                        "type": "string"
                                    },
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "collection_position": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "dashcards": {
                                        "description": "value must be seq of maps in which ids are unique",
                                        "items": {
                                            "properties": {
                                                "col": {
                                                    "description": "value must be an integer greater or equal to than zero.",
                                                    "minimum": 0,
                                                    "type": "integer"
                                                },
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "parameter_mappings": {
                                                    "items": {
                                                        "properties": {
                                                            "parameter_id": {
                                                                "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                                "description": "value must be a non-blank string."
                                                            },
                                                            "target": {}
                                                        },
                                                        "required": [
                                                            "parameter_id",
                                                            "target"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "row": {
                                                    "description": "value must be an integer greater or equal to than zero.",
                                                    "minimum": 0,
                                                    "type": "integer"
                                                },
                                                "series": {
                                                    "items": {
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "size_x": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "size_y": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "size_x",
                                                "size_y",
                                                "row",
                                                "col"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "embedding_params": {
                                        "additionalProperties": {
                                            "enum": [
                                                "disabled",
                                                "enabled",
                                                "locked"
                                            ],
                                            "type": "string"
                                        },
                                        "description": "value must be a valid embedding params map.",
                                        "type": "object"
                                    },
                                    "enable_embedding": {
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "parameters": {
                                        "items": {
                                            "description": "parameter must be a map with :id and :type keys",
                                            "properties": {
                                                "default": {},
                                                "id": {
                                                    "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                    "description": "value must be a non-blank string."
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "sectionId": {
                                                    "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                    "description": "value must be a non-blank string."
                                                },
                                                "slug": {
                                                    "type": "string"
                                                },
                                                "temporal_units": {
                                                    "items": {
                                                        "$ref": "#/components/schemas/metabase.lib.schema.temporal-bucketing~1unit"
                                                    },
                                                    "type": "array"
                                                },
                                                "type": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "values_source_config": {
                                                    "properties": {
                                                        "card_id": {
                                                            "description": "value must be an integer greater than zero.",
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "label_field": {
                                                            "description": "value must an array with :field id-or-name and an options map"
                                                        },
                                                        "value_field": {
                                                            "description": "value must an array with :field id-or-name and an options map"
                                                        },
                                                        "values": {}
                                                    },
                                                    "type": "object"
                                                },
                                                "values_source_type": {
                                                    "enum": [
                                                        "static-list",
                                                        "card",
                                                        null
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "type"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "points_of_interest": {
                                        "type": "string"
                                    },
                                    "position": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "show_in_getting_started": {
                                        "type": "boolean"
                                    },
                                    "tabs": {
                                        "description": "value must be seq of maps in which ids are unique",
                                        "items": {
                                            "properties": {
                                                "id": {
                                                    "description": "value must be an integer.",
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                    "description": "value must be a non-blank string."
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "name"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "width": {
                                        "enum": [
                                            "fixed",
                                            "full"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/dashboard/{id}",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/{id}/cards": {
            "put": {
                "description": "(DEPRECATED -- Use the `PUT /api/dashboard/:id` endpoint instead.)\n   Update `Cards` and `Tabs` on a Dashboard. Request body should have the form:\n\n    {:cards        [{:id                 ... ; DashboardCard ID\n                     :size_x             ...\n                     :size_y             ...\n                     :row                ...\n                     :col                ...\n                     :parameter_mappings ...\n                     :series             [{:id 123\n                                           ...}]}\n                     ...]\n     :tabs [{:id       ... ; DashboardTab ID\n                     :name     ...}]}",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "cards": {
                                        "description": "value must be seq of maps in which ids are unique",
                                        "items": {
                                            "properties": {
                                                "col": {
                                                    "description": "value must be an integer greater or equal to than zero.",
                                                    "minimum": 0,
                                                    "type": "integer"
                                                },
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "parameter_mappings": {
                                                    "items": {
                                                        "properties": {
                                                            "parameter_id": {
                                                                "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                                "description": "value must be a non-blank string."
                                                            },
                                                            "target": {}
                                                        },
                                                        "required": [
                                                            "parameter_id",
                                                            "target"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "row": {
                                                    "description": "value must be an integer greater or equal to than zero.",
                                                    "minimum": 0,
                                                    "type": "integer"
                                                },
                                                "series": {
                                                    "items": {
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "size_x": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "size_y": {
                                                    "description": "value must be an integer greater than zero.",
                                                    "minimum": 1,
                                                    "type": "integer"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "size_x",
                                                "size_y",
                                                "row",
                                                "col"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "tabs": {
                                        "description": "value must be seq of maps in which ids are unique",
                                        "items": {
                                            "properties": {
                                                "id": {
                                                    "description": "value must be an integer.",
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                    "description": "value must be a non-blank string."
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "name"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "cards"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/dashboard/{id}/cards",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/{id}/items": {
            "get": {
                "description": "Get Dashboard with ID.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/dashboard/{id}/items",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/{id}/params/{param-key}/search/{query}": {
            "get": {
                "description": "Fetch possible values of the parameter whose ID is `:param-key` that contain `:query`. Optionally restrict\n  these values by passing query parameters like `other-parameter=value` e.g.\n\n    ;; fetch values for Dashboard 1 parameter 'abc' that contain 'Cam' and are possible when parameter 'def' is set\n    ;; to 100\n     GET /api/dashboard/1/params/abc/search/Cam?def=100\n\n  Currently limited to first 1000 results.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/dashboard/{id}/params/{param-key}/search/{query}",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/{id}/params/{param-key}/values": {
            "get": {
                "description": "Fetch possible values of the parameter whose ID is `:param-key`. If the values come directly from a query, optionally\n  restrict these values by passing query parameters like `other-parameter=value` e.g.\n\n    ;; fetch values for Dashboard 1 parameter 'abc' that are possible when parameter 'def' is set to 100\n    GET /api/dashboard/1/params/abc/values?def=100",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/dashboard/{id}/params/{param-key}/values",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/{id}/query_metadata": {
            "get": {
                "description": "Get all of the required query metadata for the cards on dashboard.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/dashboard/{id}/query_metadata",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/{id}/related": {
            "get": {
                "description": "Return related entities.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/dashboard/{id}/related",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/embeddable": {
            "get": {
                "description": "Fetch a list of Dashboards where `enable_embedding` is `true`. The dashboards can be embedded using the embedding\n  endpoints and a signed JWT.",
                "parameters": [],
                "summary": "GET /api/dashboard/embeddable",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/params/valid-filter-fields": {
            "get": {
                "description": "Utility endpoint for powering Dashboard UI. Given some set of `filtered` Field IDs (presumably Fields used in\n  parameters) and a set of `filtering` Field IDs that will be used to restrict values of `filtered` Fields, for each\n  `filtered` Field ID return the subset of `filtering` Field IDs that would actually be used in a chain filter query\n  with these Fields.\n\n  e.g. in a chain filter query like\n\n  GET /api/dashboard/10/params/PARAM_1/values?PARAM_2=100\n\n  Assume `PARAM_1` maps to Field 1 and `PARAM_2` maps to Fields 2 and 3. The underlying MBQL query may or may not\n  filter against Fields 2 and 3, depending on whether an FK relationship that lets us create a join against Field 1\n  can be found. You can use this endpoint to determine which of those Fields is actually used:\n\n  GET /api/dashboard/params/valid-filter-fields?filtered=1&filtering=2&filtering=3\n  ;; ->\n  {1 [2 3]}\n\n  Results are returned as a map of\n\n  `filtered` Field ID -> subset of `filtering` Field IDs that would be used in chain filter query",
                "parameters": [
                    {
                        "in": "query",
                        "name": "filtered",
                        "required": true,
                        "schema": {
                            "items": {
                                "description": "value must be an integer greater than zero.",
                                "minimum": 1,
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "in": "query",
                        "name": "filtering",
                        "required": false,
                        "schema": {
                            "items": {
                                "description": "value must be an integer greater than zero.",
                                "minimum": 1,
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    }
                ],
                "summary": "GET /api/dashboard/params/valid-filter-fields",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/pivot/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query": {
            "post": {
                "description": "Run a pivot table query for a specific DashCard.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashboard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "parameters": {
                                        "items": {
                                            "allOf": [
                                                {
                                                    "properties": {
                                                        "id": {
                                                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                            "description": "value must be a non-blank string."
                                                        }
                                                    },
                                                    "required": [
                                                        "id"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "additionalProperties": {},
                                                    "type": "object"
                                                }
                                            ],
                                            "description": "value must be a parameter map with an 'id' key"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/dashboard/pivot/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/public": {
            "get": {
                "description": "Fetch a list of Dashboards with public UUIDs. These dashboards are publicly-accessible *if* public sharing is\n  enabled.",
                "parameters": [],
                "summary": "GET /api/dashboard/public",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/save": {
            "post": {
                "description": "Save a denormalized description of dashboard.",
                "parameters": [],
                "summary": "POST /api/dashboard/save",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/dashboard/save/collection/{parent-collection-id}": {
            "post": {
                "description": "Save a denormalized description of dashboard into collection with ID `:parent-collection-id`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "parent-collection-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/dashboard/save/collection/{parent-collection-id}",
                "tags": [
                    "/api/dashboard"
                ]
            }
        },
        "/api/database/": {
            "get": {
                "description": "Fetch all `Databases`.\n\n  * `include=tables` means we should hydrate the Tables belonging to each DB. Default: `false`.\n\n  * `saved` means we should include the saved questions virtual database. Default: `false`.\n\n  * `include_editable_data_model` will only include DBs for which the current user has data model editing\n    permissions. (If `include=tables`, this also applies to the list of tables in each DB). Should only be used if\n    Enterprise Edition code is available the advanced-permissions feature is enabled.\n\n  * `exclude_uneditable_details` will only include DBs for which the current user can edit the DB details. Has no\n    effect unless Enterprise Edition code is available and the advanced-permissions feature is enabled.\n\n  * `include_only_uploadable` will only include DBs into which Metabase can insert new data.\n\n  Independently of these flags, the implementation of [[metabase.models.interface/to-json]] for `:model/Database` in\n  [[metabase.models.database]] uses the implementation of [[metabase.models.interface/can-write?]] for `:model/Database`\n  in [[metabase.models.database]] to exclude the `details` field, if the requesting user lacks permission to change the\n  database details.",
                "parameters": [
                    {
                        "description": "include must be either empty or the value 'tables'",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "schema": {
                            "const": "tables"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_analytics",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "saved",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_editable_data_model",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "exclude_uneditable_details",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_only_uploadable",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/database/",
                "tags": [
                    "/api/database"
                ]
            },
            "post": {
                "description": "Add a new `Database`.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "auto_run_queries": {
                                        "type": "boolean"
                                    },
                                    "cache_ttl": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "connection_source": {
                                        "default": "admin",
                                        "enum": [
                                            "admin",
                                            "setup"
                                        ],
                                        "type": "string"
                                    },
                                    "details": {
                                        "description": "Value must be a map.",
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "engine": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "is_full_sync": {
                                        "default": true,
                                        "type": "boolean"
                                    },
                                    "is_on_demand": {
                                        "default": false,
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "schedules": {
                                        "$ref": "#/components/schemas/metabase.sync.schedules~1ExpandedSchedulesMap"
                                    }
                                },
                                "required": [
                                    "name",
                                    "engine",
                                    "details"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/database/",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}": {
            "delete": {
                "description": "Delete a `Database`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/database/{id}",
                "tags": [
                    "/api/database"
                ]
            },
            "get": {
                "description": "Get a single Database with `id`. Optionally pass `?include=tables` or `?include=tables.fields` to include the Tables\n   belonging to this database, or the Tables and Fields, respectively.  If the requestor has write permissions for the DB\n   (i.e. is an admin or has data model permissions), then certain inferred secret values will also be included in the\n   returned details (see [[metabase.models.secret/expand-db-details-inferred-secret-values]] for full details).\n\n   Passing include_editable_data_model will only return tables for which the current user has data model editing\n   permissions, if Enterprise Edition code is available and a token with the advanced-permissions feature is present.\n   In addition, if the user has no data access for the DB (aka block permissions), it will return only the DB name, ID\n   and tables, with no additional metadata.\n\n   Independently of these flags, the implementation of [[metabase.models.interface/to-json]] for `:model/Database` in\n   [[metabase.models.database]] uses the implementation of [[metabase.models.interface/can-write?]] for `:model/Database`\n   in [[metabase.models.database]] to exclude the `details` field, if the requesting user lacks permission to change the\n   database details.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "schema": {
                            "enum": [
                                "tables",
                                "tables.fields"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/database/{id}",
                "tags": [
                    "/api/database"
                ]
            },
            "put": {
                "description": "Update a `Database`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "auto_run_queries": {
                                        "type": "boolean"
                                    },
                                    "cache_ttl": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "caveats": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "details": {
                                        "description": "Value must be a map.",
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "engine": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "points_of_interest": {
                                        "type": "string"
                                    },
                                    "refingerprint": {
                                        "type": "boolean"
                                    },
                                    "schedules": {
                                        "$ref": "#/components/schemas/metabase.sync.schedules~1ExpandedSchedulesMap"
                                    },
                                    "settings": {
                                        "description": "Value must be a map.",
                                        "properties": {},
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/database/{id}",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/autocomplete_suggestions": {
            "get": {
                "description": "Return a list of autocomplete suggestions for a given `prefix`, or `substring`. Should only specify one, but\n  `substring` will have priority if both are present.\n\n  This is intended for use with the ACE Editor when the User is typing raw SQL. Suggestions include matching `Tables`\n  and `Fields` in this `Database`.\n\n  Tables are returned in the format `[table_name \"Table\"]`;\n  When Fields have a semantic_type, they are returned in the format `[field_name \"table_name base_type semantic_type\"]`\n  When Fields lack a semantic_type, they are returned in the format `[field_name \"table_name base_type\"]`",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "prefix",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "substring",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/database/{id}/autocomplete_suggestions",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/card_autocomplete_suggestions": {
            "get": {
                "description": "Return a list of `Card` autocomplete suggestions for a given `query` in a given `Database`.\n\n  This is intended for use with the ACE Editor when the User is typing in a template tag for a `Card`, e.g. {{#...}}.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_dashboard_questions",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/database/{id}/card_autocomplete_suggestions",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/discard_values": {
            "post": {
                "description": "Discards all saved field values for this `Database`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/database/{id}/discard_values",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/dismiss_spinner": {
            "post": {
                "description": "Manually set the initial sync status of the `Database` and corresponding\n  tables to be `complete` (see #20863)",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/database/{id}/dismiss_spinner",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/fields": {
            "get": {
                "description": "Get a list of all `Fields` in `Database`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/database/{id}/fields",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/healthcheck": {
            "get": {
                "description": "Reports whether the database can currently connect",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/database/{id}/healthcheck",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/idfields": {
            "get": {
                "description": "Get a list of all primary key `Fields` for `Database`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/database/{id}/idfields",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/metadata": {
            "get": {
                "description": "Get metadata about a `Database`, including all of its `Tables` and `Fields`. Returns DB, fields, and field values.\n  By default only non-hidden tables and fields are returned. Passing include_hidden=true includes them.\n\n  Passing include_editable_data_model will only return tables for which the current user has data model editing\n  permissions, if Enterprise Edition code is available and a token with the advanced-permissions feature is present.\n  In addition, if the user has no data access for the DB (aka block permissions), it will return only the DB name, ID\n  and tables, with no additional metadata.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_hidden",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_editable_data_model",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "remove_inactive",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "skip_fields",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/database/{id}/metadata",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/rescan_values": {
            "post": {
                "description": "Trigger a manual scan of the field values for this `Database`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/database/{id}/rescan_values",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/schema/": {
            "get": {
                "description": "Return a list of Tables for a Database whose `schema` is `nil` or an empty string.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_hidden",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_editable_data_model",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/database/{id}/schema/",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/schema/{schema}": {
            "get": {
                "description": "Returns a list of Tables for the given Database `id` and `schema`",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_hidden",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_editable_data_model",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/database/{id}/schema/{schema}",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/schemas": {
            "get": {
                "description": "Returns a list of all the schemas with tables found for the database `id`. Excludes schemas with no tables.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_editable_data_model",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_hidden",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/database/{id}/schemas",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/sync_schema": {
            "post": {
                "description": "Trigger a manual update of the schema metadata for this `Database`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/database/{id}/sync_schema",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/syncable_schemas": {
            "get": {
                "description": "Returns a list of all syncable schemas found for the database `id`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/database/{id}/syncable_schemas",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{id}/usage_info": {
            "get": {
                "description": "Get usage info for a database.\n  Returns a map with keys are models and values are the number of entities that use this database.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/database/{id}/usage_info",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{virtual-db}/datasets": {
            "get": {
                "description": "Returns a list of all the datasets found for the saved questions virtual database.",
                "parameters": [],
                "summary": "GET /api/database/{virtual-db}/datasets",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{virtual-db}/datasets/{schema}": {
            "get": {
                "description": "Returns a list of Tables for the datasets virtual database.",
                "parameters": [],
                "summary": "GET /api/database/{virtual-db}/datasets/{schema}",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{virtual-db}/metadata": {
            "get": {
                "description": "Endpoint that provides metadata for the Saved Questions 'virtual' database. Used for fooling the frontend\n   and allowing it to treat the Saved Questions virtual DB just like any other database.",
                "parameters": [],
                "summary": "GET /api/database/{virtual-db}/metadata",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{virtual-db}/schema/{schema}": {
            "get": {
                "description": "Returns a list of Tables for the saved questions virtual database.",
                "parameters": [],
                "summary": "GET /api/database/{virtual-db}/schema/{schema}",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/{virtual-db}/schemas": {
            "get": {
                "description": "Returns a list of all the schemas found for the saved questions virtual database.",
                "parameters": [],
                "summary": "GET /api/database/{virtual-db}/schemas",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/sample_database": {
            "post": {
                "description": "Add the sample database as a new `Database`.",
                "parameters": [],
                "summary": "POST /api/database/sample_database",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/database/validate": {
            "post": {
                "description": "Validate that we can connect to a database given a set of details.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "details": {
                                        "properties": {
                                            "details": {
                                                "properties": {},
                                                "type": "object"
                                            },
                                            "engine": {
                                                "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                "description": "value must be a non-blank string."
                                            }
                                        },
                                        "required": [
                                            "engine",
                                            "details"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "details"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/database/validate",
                "tags": [
                    "/api/database"
                ]
            }
        },
        "/api/dataset/": {
            "post": {
                "description": "Execute a query and retrieve the results in the usual format. The query will not use the cache.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "database": {
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/dataset/",
                "tags": [
                    "/api/dataset"
                ]
            }
        },
        "/api/dataset/{export-format}": {
            "post": {
                "description": "Execute a query and download the result data as a file in the specified format.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "export-format",
                        "required": true,
                        "schema": {
                            "enum": [
                                "csv",
                                "api",
                                "xlsx",
                                "json"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "format_rows": {
                                        "default": false,
                                        "type": "boolean"
                                    },
                                    "pivot_results": {
                                        "default": false,
                                        "type": "boolean"
                                    },
                                    "query": {
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "visualization_settings": {
                                        "default": {},
                                        "properties": {},
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "query",
                                    "visualization_settings",
                                    "format_rows",
                                    "pivot_results"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/dataset/{export-format}",
                "tags": [
                    "/api/dataset"
                ]
            }
        },
        "/api/dataset/native": {
            "post": {
                "description": "Fetch a native version of an MBQL query.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "database": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "pretty": {
                                        "default": true,
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "database"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/dataset/native",
                "tags": [
                    "/api/dataset"
                ]
            }
        },
        "/api/dataset/parameter/search/{query}": {
            "post": {
                "description": "Return parameter values for cards or dashboards that are being edited. Expects a query string at `?query=foo`.",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "field_ids": {
                                        "items": {
                                            "description": "value must be an integer greater than zero.",
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "parameter": {
                                        "description": "parameter must be a map with :id and :type keys",
                                        "properties": {
                                            "default": {},
                                            "id": {
                                                "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                "description": "value must be a non-blank string."
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "sectionId": {
                                                "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                "description": "value must be a non-blank string."
                                            },
                                            "slug": {
                                                "type": "string"
                                            },
                                            "temporal_units": {
                                                "items": {
                                                    "$ref": "#/components/schemas/metabase.lib.schema.temporal-bucketing~1unit"
                                                },
                                                "type": "array"
                                            },
                                            "type": {
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "values_source_config": {
                                                "properties": {
                                                    "card_id": {
                                                        "description": "value must be an integer greater than zero.",
                                                        "minimum": 1,
                                                        "type": "integer"
                                                    },
                                                    "label_field": {
                                                        "description": "value must an array with :field id-or-name and an options map"
                                                    },
                                                    "value_field": {
                                                        "description": "value must an array with :field id-or-name and an options map"
                                                    },
                                                    "values": {}
                                                },
                                                "type": "object"
                                            },
                                            "values_source_type": {
                                                "enum": [
                                                    "static-list",
                                                    "card",
                                                    null
                                                ]
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "type"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "parameter"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/dataset/parameter/search/{query}",
                "tags": [
                    "/api/dataset"
                ]
            }
        },
        "/api/dataset/parameter/values": {
            "post": {
                "description": "Return parameter values for cards or dashboards that are being edited.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "field_ids": {
                                        "items": {
                                            "description": "value must be an integer greater than zero.",
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "parameter": {
                                        "description": "parameter must be a map with :id and :type keys",
                                        "properties": {
                                            "default": {},
                                            "id": {
                                                "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                "description": "value must be a non-blank string."
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "sectionId": {
                                                "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                "description": "value must be a non-blank string."
                                            },
                                            "slug": {
                                                "type": "string"
                                            },
                                            "temporal_units": {
                                                "items": {
                                                    "$ref": "#/components/schemas/metabase.lib.schema.temporal-bucketing~1unit"
                                                },
                                                "type": "array"
                                            },
                                            "type": {
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "values_source_config": {
                                                "properties": {
                                                    "card_id": {
                                                        "description": "value must be an integer greater than zero.",
                                                        "minimum": 1,
                                                        "type": "integer"
                                                    },
                                                    "label_field": {
                                                        "description": "value must an array with :field id-or-name and an options map"
                                                    },
                                                    "value_field": {
                                                        "description": "value must an array with :field id-or-name and an options map"
                                                    },
                                                    "values": {}
                                                },
                                                "type": "object"
                                            },
                                            "values_source_type": {
                                                "enum": [
                                                    "static-list",
                                                    "card",
                                                    null
                                                ]
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "type"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "parameter"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/dataset/parameter/values",
                "tags": [
                    "/api/dataset"
                ]
            }
        },
        "/api/dataset/pivot": {
            "post": {
                "description": "Generate a pivoted dataset for an ad-hoc query",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "database": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/dataset/pivot",
                "tags": [
                    "/api/dataset"
                ]
            }
        },
        "/api/dataset/query_metadata": {
            "post": {
                "description": "Get all of the required query metadata for an ad-hoc query.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "database": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "database"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/dataset/query_metadata",
                "tags": [
                    "/api/dataset"
                ]
            }
        },
        "/api/email/": {
            "delete": {
                "description": "Clear all email related settings. You must be a superuser or have `setting` permission to do this.",
                "parameters": [],
                "summary": "DELETE /api/email/",
                "tags": [
                    "/api/email"
                ]
            },
            "put": {
                "description": "Update multiple email Settings. You must be a superuser or have `setting` permission to do this.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/email/",
                "tags": [
                    "/api/email"
                ]
            }
        },
        "/api/email/test": {
            "post": {
                "description": "Send a test email using the SMTP Settings. You must be a superuser or have `setting` permission to do this.\n  Returns `{:ok true}` if we were able to send the message successfully, otherwise a standard 400 error response.",
                "parameters": [],
                "summary": "POST /api/email/test",
                "tags": [
                    "/api/email"
                ]
            }
        },
        "/api/embed/card/{token}": {
            "get": {
                "description": "Fetch a Card via a JSON Web Token signed with the `embedding-secret-key`.\n\n   Token should have the following format:\n\n     {:resource {:question <card-id>}}",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/embed/card/{token}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/card/{token}/field/{field-id}/remapping/{remapped-id}": {
            "get": {
                "description": "Fetch remapped Field values. This is the same as `GET /api/field/:id/remapping/:remapped-id`, but for use with\n  embedded Cards.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "remapped-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "value",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/embed/card/{token}/field/{field-id}/remapping/{remapped-id}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/card/{token}/field/{field-id}/search/{search-field-id}": {
            "get": {
                "description": "Search for values of a Field that is referenced by an embedded Card.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "search-field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "value",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/embed/card/{token}/field/{field-id}/search/{search-field-id}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/card/{token}/field/{field-id}/values": {
            "get": {
                "description": "Fetch FieldValues for a Field that is referenced by an embedded Card.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/embed/card/{token}/field/{field-id}/values",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/card/{token}/params/{param-key}/search/{prefix}": {
            "get": {
                "description": "Embedded version of chain filter search endpoint.",
                "parameters": [],
                "summary": "GET /api/embed/card/{token}/params/{param-key}/search/{prefix}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/card/{token}/params/{param-key}/values": {
            "get": {
                "description": "Embedded version of api.card filter values endpoint.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "param-key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/embed/card/{token}/params/{param-key}/values",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/card/{token}/query": {
            "get": {
                "description": "Fetch the results of running a Card using a JSON Web Token signed with the `embedding-secret-key`.\n\n   Token should have the following format:\n\n     {:resource {:question <card-id>}\n      :params   <parameters>}",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/embed/card/{token}/query",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/card/{token}/query/{export-format}": {
            "get": {
                "description": "Like `GET /api/embed/card/query`, but returns the results as a file in the specified format.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "export-format",
                        "required": true,
                        "schema": {
                            "enum": [
                                "csv",
                                "api",
                                "xlsx",
                                "json"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "format_rows",
                        "required": true,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pivot_results",
                        "required": true,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/embed/card/{token}/query/{export-format}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/dashboard/{token}": {
            "get": {
                "description": "Fetch a Dashboard via a JSON Web Token signed with the `embedding-secret-key`.\n\n   Token should have the following format:\n\n     {:resource {:dashboard <dashboard-id>}}",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/embed/dashboard/{token}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}": {
            "get": {
                "description": "Fetch the results of running a Card belonging to a Dashboard using a JSON Web Token signed with the\n  `embedding-secret-key`",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}/{export-format}": {
            "get": {
                "description": "Fetch the results of running a Card belonging to a Dashboard using a JSON Web Token signed with the\n  `embedding-secret-key` return the data in one of the export formats",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "export-format",
                        "required": true,
                        "schema": {
                            "enum": [
                                "csv",
                                "api",
                                "xlsx",
                                "json"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "format_rows",
                        "required": true,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pivot_results",
                        "required": true,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}/{export-format}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/dashboard/{token}/field/{field-id}/remapping/{remapped-id}": {
            "get": {
                "description": "Fetch remapped Field values. This is the same as `GET /api/field/:id/remapping/:remapped-id`, but for use with\n  embedded Dashboards.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "remapped-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "value",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/embed/dashboard/{token}/field/{field-id}/remapping/{remapped-id}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/dashboard/{token}/field/{field-id}/search/{search-field-id}": {
            "get": {
                "description": "Search for values of a Field that is referenced by a Card in an embedded Dashboard.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "search-field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "value",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/embed/dashboard/{token}/field/{field-id}/search/{search-field-id}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/dashboard/{token}/field/{field-id}/values": {
            "get": {
                "description": "Fetch FieldValues for a Field that is used as a param in an embedded Dashboard.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/embed/dashboard/{token}/field/{field-id}/values",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/dashboard/{token}/params/{param-key}/search/{prefix}": {
            "get": {
                "description": "Embedded version of chain filter search endpoint.",
                "parameters": [],
                "summary": "GET /api/embed/dashboard/{token}/params/{param-key}/search/{prefix}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/dashboard/{token}/params/{param-key}/values": {
            "get": {
                "description": "Embedded version of chain filter values endpoint.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "param-key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/embed/dashboard/{token}/params/{param-key}/values",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/pivot/card/{token}/query": {
            "get": {
                "description": "Fetch the results of running a Card using a JSON Web Token signed with the `embedding-secret-key`.\n\n   Token should have the following format:\n\n     {:resource {:question <card-id>}\n      :params   <parameters>}",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/embed/pivot/card/{token}/query",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/pivot/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}": {
            "get": {
                "description": "Fetch the results of running a Card belonging to a Dashboard using a JSON Web Token signed with the\n  `embedding-secret-key`",
                "parameters": [
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/embed/pivot/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/tiles/card/{token}/{zoom}/{x}/{y}/{lat-field}/{lon-field}": {
            "get": {
                "description": "Generates a single tile image for an embedded Card using the map visualization.",
                "parameters": [
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "zoom",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "x",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "y",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "lat-field",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                        }
                    },
                    {
                        "in": "path",
                        "name": "lon-field",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                        }
                    },
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/embed/tiles/card/{token}/{zoom}/{x}/{y}/{lat-field}/{lon-field}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/embed/tiles/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}/{zoom}/{x}/{y}/{lat-field}/{lon-field}": {
            "get": {
                "description": "Generates a single tile image for a Card on an embedded Dashboard using the map visualization.",
                "parameters": [
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "zoom",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "x",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "y",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "lat-field",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                        }
                    },
                    {
                        "in": "path",
                        "name": "lon-field",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                        }
                    },
                    {
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/embed/tiles/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}/{zoom}/{x}/{y}/{lat-field}/{lon-field}",
                "tags": [
                    "/api/embed"
                ]
            }
        },
        "/api/field/{id}": {
            "get": {
                "description": "Get `Field` with ID.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_editable_data_model",
                        "required": true,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/field/{id}",
                "tags": [
                    "/api/field"
                ]
            },
            "put": {
                "description": "Update `Field` with ID.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "caveats": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "coercion_strategy": {
                                        "description": "value must be a valid coercion strategy (keyword or string)."
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "display_name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "fk_target_field_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "has_field_values": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.metadata~1column.has-field-values"
                                    },
                                    "json_unfolding": {
                                        "type": "boolean"
                                    },
                                    "nfc_path": {
                                        "items": {
                                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                            "description": "value must be a non-blank string."
                                        },
                                        "type": "array"
                                    },
                                    "points_of_interest": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "semantic_type": {
                                        "description": "value must be a valid field semantic or relation type (keyword or string)."
                                    },
                                    "settings": {
                                        "description": "Value must be a map.",
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "visibility_type": {
                                        "enum": [
                                            "retired",
                                            "sensitive",
                                            "normal",
                                            "hidden",
                                            "details-only"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/field/{id}",
                "tags": [
                    "/api/field"
                ]
            }
        },
        "/api/field/{id}/dimension": {
            "delete": {
                "description": "Remove the dimension associated to field at ID",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/field/{id}/dimension",
                "tags": [
                    "/api/field"
                ]
            },
            "post": {
                "description": "Sets the dimension for the given field at ID",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "human_readable_field_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "type": {
                                        "enum": [
                                            "internal",
                                            "external"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "type",
                                    "name"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/field/{id}/dimension",
                "tags": [
                    "/api/field"
                ]
            }
        },
        "/api/field/{id}/discard_values": {
            "post": {
                "description": "Discard the FieldValues belonging to this Field. Only applies to fields that have FieldValues. If this Field's\n   Database is set up to automatically sync FieldValues, they will be recreated during the next cycle.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/field/{id}/discard_values",
                "tags": [
                    "/api/field"
                ]
            }
        },
        "/api/field/{id}/related": {
            "get": {
                "description": "Return related entities.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/field/{id}/related",
                "tags": [
                    "/api/field"
                ]
            }
        },
        "/api/field/{id}/remapping/{remapped-id}": {
            "get": {
                "description": "Fetch remapped Field values.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "remapped-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "value",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/field/{id}/remapping/{remapped-id}",
                "tags": [
                    "/api/field"
                ]
            }
        },
        "/api/field/{id}/rescan_values": {
            "post": {
                "description": "Manually trigger an update for the FieldValues for this Field. Only applies to Fields that are eligible for\n   FieldValues.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/field/{id}/rescan_values",
                "tags": [
                    "/api/field"
                ]
            }
        },
        "/api/field/{id}/search/{search-id}": {
            "get": {
                "description": "Search for values of a Field with `search-id` that start with `value`. See docstring for\n  `metabase.api.field/search-values` for a more detailed explanation.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "search-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "value",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/field/{id}/search/{search-id}",
                "tags": [
                    "/api/field"
                ]
            }
        },
        "/api/field/{id}/summary": {
            "get": {
                "description": "Get the count and distinct count of `Field` with ID.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/field/{id}/summary",
                "tags": [
                    "/api/field"
                ]
            }
        },
        "/api/field/{id}/values": {
            "get": {
                "description": "If a Field's value of `has_field_values` is `:list`, return a list of all the distinct values of the Field (or\n  remapped Field), and (if defined by a User) a map of human-readable remapped values. If `has_field_values` is not\n  `:list`, checks whether we should create FieldValues for this Field; if so, creates and returns them.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/field/{id}/values",
                "tags": [
                    "/api/field"
                ]
            },
            "post": {
                "description": "Update the fields values and human-readable values for a `Field` whose semantic type is\n  `category`/`city`/`state`/`country` or whose base type is `type/Boolean`. The human-readable values are optional.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "values": {
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "additionalItems": false,
                                                    "items": [
                                                        {}
                                                    ],
                                                    "type": "array"
                                                },
                                                {
                                                    "additionalItems": false,
                                                    "items": [
                                                        {},
                                                        {
                                                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                            "description": "value must be a non-blank string."
                                                        }
                                                    ],
                                                    "type": "array"
                                                }
                                            ]
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "values"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/field/{id}/values",
                "tags": [
                    "/api/field"
                ]
            }
        },
        "/api/geojson/": {
            "get": {
                "description": "Load a custom GeoJSON file based on a URL or file path provided as a query parameter.\n  This behaves similarly to /api/geojson/:key but doesn't require the custom map to be saved to the DB first.",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/geojson/",
                "tags": [
                    "/api/geojson"
                ]
            }
        },
        "/api/geojson/{key}": {
            "get": {
                "description": "Fetch a custom GeoJSON file as defined in the `custom-geojson` setting. (This just acts as a simple proxy for the\n  file specified for `key`).",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "key",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/geojson/{key}",
                "tags": [
                    "/api/geojson"
                ]
            }
        },
        "/api/google/settings": {
            "put": {
                "description": "Update Google Sign-In related settings. You must be a superuser to do this.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "google-auth-auto-create-accounts-domain": {
                                        "type": "string"
                                    },
                                    "google-auth-client-id": {
                                        "type": "string"
                                    },
                                    "google-auth-enabled": {
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/google/settings",
                "tags": [
                    "/api/google"
                ]
            }
        },
        "/api/ldap/settings": {
            "put": {
                "description": "Update LDAP related settings. You must be a superuser to do this.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ldap-enabled": {
                                        "type": "boolean"
                                    },
                                    "ldap-host": {
                                        "type": "string"
                                    },
                                    "ldap-password": {
                                        "type": "string"
                                    },
                                    "ldap-port": {
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/ldap/settings",
                "tags": [
                    "/api/ldap"
                ]
            }
        },
        "/api/login-history/current": {
            "get": {
                "description": "Fetch recent logins for the current user.",
                "parameters": [],
                "summary": "GET /api/login-history/current",
                "tags": [
                    "/api/login-history"
                ]
            }
        },
        "/api/model-index/": {
            "get": {
                "description": "Retrieve list of ModelIndex.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "model_id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/model-index/",
                "tags": [
                    "/api/model-index"
                ]
            },
            "post": {
                "description": "Create ModelIndex.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "model_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "pk_ref": {},
                                    "value_ref": {}
                                },
                                "required": [
                                    "model_id",
                                    "pk_ref",
                                    "value_ref"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/model-index/",
                "tags": [
                    "/api/model-index"
                ]
            }
        },
        "/api/model-index/{id}": {
            "delete": {
                "description": "Delete ModelIndex.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/model-index/{id}",
                "tags": [
                    "/api/model-index"
                ]
            },
            "get": {
                "description": "Retrieve ModelIndex.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/model-index/{id}",
                "tags": [
                    "/api/model-index"
                ]
            }
        },
        "/api/native-query-snippet/": {
            "get": {
                "description": "Fetch all snippets",
                "parameters": [
                    {
                        "in": "query",
                        "name": "archived",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/native-query-snippet/",
                "tags": [
                    "/api/native-query-snippet"
                ]
            },
            "post": {
                "description": "Create a new `NativeQuerySnippet`.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "content": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "snippet names cannot include '}' or start with spaces"
                                    }
                                },
                                "required": [
                                    "content",
                                    "name"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/native-query-snippet/",
                "tags": [
                    "/api/native-query-snippet"
                ]
            }
        },
        "/api/native-query-snippet/{id}": {
            "get": {
                "description": "Fetch native query snippet with ID.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/native-query-snippet/{id}",
                "tags": [
                    "/api/native-query-snippet"
                ]
            },
            "put": {
                "description": "Update an existing `NativeQuerySnippet`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "archived": {
                                        "type": "boolean"
                                    },
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "content": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "snippet names cannot include '}' or start with spaces"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/native-query-snippet/{id}",
                "tags": [
                    "/api/native-query-snippet"
                ]
            }
        },
        "/api/notification/": {
            "get": {
                "description": "List notifications.\n  - `creator_id`: if provided returns only notifications created by this user\n  - `recipient_id`: if provided returns only notification that has recipient_id as a recipient\n  - `creator_or_recipient_id`: if provided returns only notification that has user_id as creator or recipient\n  - `card_id`: if provided returns only notification that has card_id as payload",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "creator_id",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "recipient_id",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "creator_or_recipient_id",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "card_id",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_inactive",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pyaload_type",
                        "required": false,
                        "schema": {
                            "enum": [
                                "notification/dashboard",
                                "notification/system-event",
                                "notification/testing",
                                "notification/card"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/notification/",
                "tags": [
                    "/api/notification"
                ]
            },
            "post": {
                "description": "Create a new notification, return the created notification.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/metabase.notification.models~1FullyHydratedNotification"
                            }
                        }
                    }
                },
                "summary": "POST /api/notification/",
                "tags": [
                    "/api/notification"
                ]
            }
        },
        "/api/notification/{id}": {
            "get": {
                "description": "Get a notification by id.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/notification/{id}",
                "tags": [
                    "/api/notification"
                ]
            },
            "put": {
                "description": "Update a notification, can also update its subscriptions, handlers.\n  Return the updated notification.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/metabase.notification.models~1FullyHydratedNotification"
                            }
                        }
                    }
                },
                "summary": "PUT /api/notification/{id}",
                "tags": [
                    "/api/notification"
                ]
            }
        },
        "/api/notification/{id}/send": {
            "post": {
                "description": "Send a notification by id.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "handler_ids": {
                                        "items": {
                                            "description": "value must be an integer greater than zero.",
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/notification/{id}/send",
                "tags": [
                    "/api/notification"
                ]
            }
        },
        "/api/notification/{id}/unsubscribe": {
            "post": {
                "description": "Unsubscribe current user from a notification.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/notification/{id}/unsubscribe",
                "tags": [
                    "/api/notification"
                ]
            }
        },
        "/api/notification/send": {
            "post": {
                "description": "Send an unsaved notification.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/metabase.notification.models~1FullyHydratedNotification"
                            }
                        }
                    }
                },
                "summary": "POST /api/notification/send",
                "tags": [
                    "/api/notification"
                ]
            }
        },
        "/api/notification/unsubscribe/": {
            "post": {
                "description": "Allow non-users to unsubscribe from notifications, with the hash given through email.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "type": "string"
                                    },
                                    "hash": {
                                        "type": "string"
                                    },
                                    "notification-handler-id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "notification-handler-id",
                                    "email",
                                    "hash"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/notification/unsubscribe/",
                "tags": [
                    "/api/notification/unsubscribe"
                ]
            }
        },
        "/api/notification/unsubscribe/undo": {
            "post": {
                "description": "Allow non-users to undo an unsubscribe from notifications, with the hash given through email.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "type": "string"
                                    },
                                    "hash": {
                                        "type": "string"
                                    },
                                    "notification-handler-id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "notification-handler-id",
                                    "email",
                                    "hash"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/notification/unsubscribe/undo",
                "tags": [
                    "/api/notification/unsubscribe"
                ]
            }
        },
        "/api/notify/db/{id}": {
            "post": {
                "description": "Notification about a potential schema change to one of our `Databases`.\n  Caller can optionally specify a `:table_id` or `:table_name` in the body to limit updates to a single\n  `Table`. Optional Parameter `:scan` can be `\"full\"` or `\"schema\"` for a full sync or a schema sync, available\n  regardless if a `:table_id` or `:table_name` is passed.\n  This endpoint is secured by an API key that needs to be passed as a `X-METABASE-APIKEY` header which needs to be defined in\n  the `MB_API_KEY` [environment variable](https://www.metabase.com/docs/latest/configuring-metabase/environment-variables.html#mb_api_key)",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "scan": {
                                        "enum": [
                                            "full",
                                            "schema"
                                        ],
                                        "type": "string"
                                    },
                                    "table_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "table_name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/notify/db/{id}",
                "tags": [
                    "/api/notify"
                ]
            }
        },
        "/api/notify/db/{id}/new-table": {
            "post": {
                "description": "Sync a new table without running a full database sync. Requires `schema_name` and `table_name`. Will throw an error\n  if the table already exists in Metabase or cannot be found.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "schema_name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "table_name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "required": [
                                    "schema_name",
                                    "table_name"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/notify/db/{id}/new-table",
                "tags": [
                    "/api/notify"
                ]
            }
        },
        "/api/notify/db/attached_datawarehouse": {
            "post": {
                "description": "Sync the attached datawarehouse. Can provide in the body:\n  - table_name and schema_name: both strings. Will look for an existing table and sync it, otherwise will try to find a\n  new table with that name and sync it. If it cannot find a table it will throw an error. If table_name is empty or\n  blank, will sync the entire database.\n  - synchronous?: is a boolean value to indicate if this should block on the result.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "schema_name": {
                                        "type": "string"
                                    },
                                    "synchronous?": {
                                        "default": false,
                                        "type": "boolean"
                                    },
                                    "table_name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "required": [],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/notify/db/attached_datawarehouse",
                "tags": [
                    "/api/notify"
                ]
            }
        },
        "/api/permissions/graph": {
            "get": {
                "description": "Fetch a graph of all Permissions.",
                "parameters": [],
                "summary": "GET /api/permissions/graph",
                "tags": [
                    "/api/permissions"
                ]
            },
            "put": {
                "description": "Do a batch update of Permissions by passing in a modified graph. This should return the same graph, in the same\n  format, that you got from `GET /api/permissions/graph`, with any changes made in the wherever necessary. This\n  modified graph must correspond to the `PermissionsGraph` schema. If successful, this endpoint returns the updated\n  permissions graph; use this as a base for any further modifications.\n\n  Revisions to the permissions graph are tracked. If you fetch the permissions graph and some other third-party\n  modifies it before you can submit you revisions, the endpoint will instead make no changes and return a\n  409 (Conflict) response. In this case, you should fetch the updated graph and make desired changes to that.\n\n  The optional `sandboxes` key contains a list of sandboxes that should be created or modified in conjunction with\n  this permissions graph update. Since data sandboxing is an Enterprise Edition-only feature, a 402 (Payment Required)\n  response will be returned if this key is present and the server is not running the Enterprise Edition, and/or the\n  `:sandboxes` feature flag is not present.\n\n  If the skip-graph query param is truthy, then the graph will not be returned.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "skip-graph",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/permissions/graph",
                "tags": [
                    "/api/permissions"
                ]
            }
        },
        "/api/permissions/graph/db/{db-id}": {
            "get": {
                "description": "Fetch a graph of all Permissions for db-id `db-id`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "db-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/permissions/graph/db/{db-id}",
                "tags": [
                    "/api/permissions"
                ]
            }
        },
        "/api/permissions/graph/group/{group-id}": {
            "get": {
                "description": "Fetch a graph of all Permissions for group-id `group-id`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "group-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/permissions/graph/group/{group-id}",
                "tags": [
                    "/api/permissions"
                ]
            }
        },
        "/api/permissions/group": {
            "get": {
                "description": "Fetch all `PermissionsGroups`, including a count of the number of `:members` in that group.\n  This API requires superuser or group manager of more than one group.\n  Group manager is only available if `advanced-permissions` is enabled and returns only groups that user\n  is manager of.",
                "parameters": [],
                "summary": "GET /api/permissions/group",
                "tags": [
                    "/api/permissions"
                ]
            },
            "post": {
                "description": "Create a new `PermissionsGroup`.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/permissions/group",
                "tags": [
                    "/api/permissions"
                ]
            }
        },
        "/api/permissions/group/{group-id}": {
            "delete": {
                "description": "Delete a specific `PermissionsGroup`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "group-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/permissions/group/{group-id}",
                "tags": [
                    "/api/permissions"
                ]
            },
            "put": {
                "description": "Update the name of a `PermissionsGroup`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "group-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/permissions/group/{group-id}",
                "tags": [
                    "/api/permissions"
                ]
            }
        },
        "/api/permissions/group/{id}": {
            "get": {
                "description": "Fetch the details for a certain permissions group.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/permissions/group/{id}",
                "tags": [
                    "/api/permissions"
                ]
            }
        },
        "/api/permissions/membership": {
            "get": {
                "description": "Fetch a map describing the group memberships of various users.\n   This map's format is:\n\n    {<user-id> [{:membership_id    <id>\n                 :group_id         <id>\n                 :is_group_manager boolean}]}",
                "parameters": [],
                "summary": "GET /api/permissions/membership",
                "tags": [
                    "/api/permissions"
                ]
            },
            "post": {
                "description": "Add a `User` to a `PermissionsGroup`. Returns updated list of members belonging to the group.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "group_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "is_group_manager": {
                                        "default": false,
                                        "type": "boolean"
                                    },
                                    "user_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "group_id",
                                    "user_id"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/permissions/membership",
                "tags": [
                    "/api/permissions"
                ]
            }
        },
        "/api/permissions/membership/{group-id}/clear": {
            "put": {
                "description": "Remove all members from a `PermissionsGroup`. Returns a 400 (Bad Request) if the group ID is for the admin group.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "group-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "PUT /api/permissions/membership/{group-id}/clear",
                "tags": [
                    "/api/permissions"
                ]
            }
        },
        "/api/permissions/membership/{id}": {
            "delete": {
                "description": "Remove a User from a PermissionsGroup (delete their membership).",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/permissions/membership/{id}",
                "tags": [
                    "/api/permissions"
                ]
            },
            "put": {
                "description": "Update a Permission Group membership. Returns the updated record.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "is_group_manager": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "is_group_manager"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/permissions/membership/{id}",
                "tags": [
                    "/api/permissions"
                ]
            }
        },
        "/api/persist/": {
            "get": {
                "description": "List the entries of [[PersistedInfo]] in order to show a status page.",
                "parameters": [],
                "summary": "GET /api/persist/",
                "tags": [
                    "/api/persist"
                ]
            }
        },
        "/api/persist/{persisted-info-id}": {
            "get": {
                "description": "Fetch a particular [[PersistedInfo]] by id.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "persisted-info-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/persist/{persisted-info-id}",
                "tags": [
                    "/api/persist"
                ]
            }
        },
        "/api/persist/card/{card-id}": {
            "get": {
                "description": "Fetch a particular [[PersistedInfo]] by card-id.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/persist/card/{card-id}",
                "tags": [
                    "/api/persist"
                ]
            }
        },
        "/api/persist/card/{card-id}/persist": {
            "post": {
                "description": "Mark the model (card) as persisted. Runs the query and saves it to the database backing the card and hot swaps this\n  query in place of the model's query.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/persist/card/{card-id}/persist",
                "tags": [
                    "/api/persist"
                ]
            }
        },
        "/api/persist/card/{card-id}/refresh": {
            "post": {
                "description": "Refresh the persisted model caching `card-id`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/persist/card/{card-id}/refresh",
                "tags": [
                    "/api/persist"
                ]
            }
        },
        "/api/persist/card/{card-id}/unpersist": {
            "post": {
                "description": "Unpersist this model. Deletes the persisted table backing the model and all queries after this will use the card's\n  query rather than the saved version of the query.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/persist/card/{card-id}/unpersist",
                "tags": [
                    "/api/persist"
                ]
            }
        },
        "/api/persist/database/{id}/persist": {
            "post": {
                "description": "Attempt to enable model persistence for a database. If already enabled returns a generic 204.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/persist/database/{id}/persist",
                "tags": [
                    "/api/persist"
                ]
            }
        },
        "/api/persist/database/{id}/unpersist": {
            "post": {
                "description": "Attempt to disable model persistence for a database. If already not enabled, just returns a generic 204.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/persist/database/{id}/unpersist",
                "tags": [
                    "/api/persist"
                ]
            }
        },
        "/api/persist/disable": {
            "post": {
                "description": "Disable global setting to allow databases to persist models. This will remove all tasks to refresh tables, remove\n  that option from databases which might have it enabled, and delete all cached tables.",
                "parameters": [],
                "summary": "POST /api/persist/disable",
                "tags": [
                    "/api/persist"
                ]
            }
        },
        "/api/persist/enable": {
            "post": {
                "description": "Enable global setting to allow databases to persist models.",
                "parameters": [],
                "summary": "POST /api/persist/enable",
                "tags": [
                    "/api/persist"
                ]
            }
        },
        "/api/persist/set-refresh-schedule": {
            "post": {
                "description": "Set the cron schedule to refresh persisted models.\n   Shape should be JSON like {cron: \"0 30 1/8 * * ? *\"}.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "cron": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "required": [
                                    "cron"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/persist/set-refresh-schedule",
                "tags": [
                    "/api/persist"
                ]
            }
        },
        "/api/premium-features/token/status": {
            "get": {
                "description": "Fetch info about the current Premium-Features premium features token including whether it is `valid`, a `trial` token, its\n  `features`, when it is `valid-thru`, and the `status` of the account.",
                "parameters": [],
                "summary": "GET /api/premium-features/token/status",
                "tags": [
                    "/api/premium-features"
                ]
            }
        },
        "/api/preview_embed/card/{token}": {
            "get": {
                "description": "Fetch a Card you're considering embedding by passing a JWT `token`.",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/preview_embed/card/{token}",
                "tags": [
                    "/api/preview_embed"
                ]
            }
        },
        "/api/preview_embed/card/{token}/query": {
            "get": {
                "description": "Fetch the query results for a Card you're considering embedding by passing a JWT `token`.",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/preview_embed/card/{token}/query",
                "tags": [
                    "/api/preview_embed"
                ]
            }
        },
        "/api/preview_embed/dashboard/{token}": {
            "get": {
                "description": "Fetch a Dashboard you're considering embedding by passing a JWT `token`. ",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/preview_embed/dashboard/{token}",
                "tags": [
                    "/api/preview_embed"
                ]
            }
        },
        "/api/preview_embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}": {
            "get": {
                "description": "Fetch the results of running a Card belonging to a Dashboard you're considering embedding with JWT `token`.",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/preview_embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}",
                "tags": [
                    "/api/preview_embed"
                ]
            }
        },
        "/api/preview_embed/dashboard/{token}/params/{param-key}/values": {
            "get": {
                "description": "Embedded version of chain filter values endpoint.",
                "parameters": [],
                "summary": "GET /api/preview_embed/dashboard/{token}/params/{param-key}/values",
                "tags": [
                    "/api/preview_embed"
                ]
            }
        },
        "/api/preview_embed/pivot/card/{token}/query": {
            "get": {
                "description": "Fetch the query results for a Card you're considering embedding by passing a JWT `token`.",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/preview_embed/pivot/card/{token}/query",
                "tags": [
                    "/api/preview_embed"
                ]
            }
        },
        "/api/preview_embed/pivot/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}": {
            "get": {
                "description": "Fetch the results of running a Card belonging to a Dashboard you're considering embedding with JWT `token`.",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/preview_embed/pivot/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}",
                "tags": [
                    "/api/preview_embed"
                ]
            }
        },
        "/api/public/action/{uuid}": {
            "get": {
                "description": "Fetch a publicly-accessible Action. Does not require auth credentials. Public sharing must be enabled.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/public/action/{uuid}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/action/{uuid}/execute": {
            "post": {
                "description": "Execute the Action.\n\n   `parameters` should be the mapped dashboard parameters with values.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "parameters": {
                                        "additionalProperties": {},
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/public/action/{uuid}/execute",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/card/{uuid}": {
            "get": {
                "description": "Fetch a publicly-accessible Card an return query results as well as `:card` information. Does not require auth\n   credentials. Public sharing must be enabled.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/public/card/{uuid}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/card/{uuid}/field/{field-id}/remapping/{remapped-id}": {
            "get": {
                "description": "Fetch remapped Field values. This is the same as `GET /api/field/:id/remapping/:remapped-id`, but for use with public\n  Cards.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "remapped-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "value",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/public/card/{uuid}/field/{field-id}/remapping/{remapped-id}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/card/{uuid}/field/{field-id}/search/{search-field-id}": {
            "get": {
                "description": "Search for values of a Field that is referenced by a public Card.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "search-field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "value",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/public/card/{uuid}/field/{field-id}/search/{search-field-id}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/card/{uuid}/field/{field-id}/values": {
            "get": {
                "description": "Fetch FieldValues for a Field that is referenced by a public Card.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/public/card/{uuid}/field/{field-id}/values",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/card/{uuid}/params/{param-key}/search/{query}": {
            "get": {
                "description": "Fetch values for a parameter on a public card containing `query`.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "param-key",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/public/card/{uuid}/params/{param-key}/search/{query}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/card/{uuid}/params/{param-key}/values": {
            "get": {
                "description": "Fetch values for a parameter on a public card.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "param-key",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/public/card/{uuid}/params/{param-key}/values",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/card/{uuid}/query": {
            "get": {
                "description": "Fetch a publicly-accessible Card an return query results as well as `:card` information. Does not require auth\n   credentials. Public sharing must be enabled.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/public/card/{uuid}/query",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/card/{uuid}/query/{export-format}": {
            "get": {
                "description": "Fetch a publicly-accessible Card and return query results in the specified format. Does not require auth\n  credentials. Public sharing must be enabled.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "export-format",
                        "required": true,
                        "schema": {
                            "enum": [
                                "csv",
                                "api",
                                "xlsx",
                                "json"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "format_rows",
                        "required": true,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pivot_results",
                        "required": true,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/public/card/{uuid}/query/{export-format}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/dashboard/{uuid}": {
            "get": {
                "description": "Fetch a publicly-accessible Dashboard. Does not require auth credentials. Public sharing must be enabled.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/public/dashboard/{uuid}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}": {
            "get": {
                "description": "Fetch the results for a Card in a publicly-accessible Dashboard. Does not require auth credentials. Public\n   sharing must be enabled.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/public/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}/{export-format}": {
            "post": {
                "description": "Fetch the results of running a publicly-accessible Card belonging to a Dashboard and return the data in one of the\n  export formats. Does not require auth credentials. Public sharing must be enabled.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "export-format",
                        "required": true,
                        "schema": {
                            "enum": [
                                "csv",
                                "api",
                                "xlsx",
                                "json"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "format_rows": {
                                        "default": false,
                                        "type": "boolean"
                                    },
                                    "parameters": {
                                        "items": {
                                            "properties": {},
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "pivot_results": {
                                        "default": false,
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "format_rows",
                                    "pivot_results"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/public/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}/{export-format}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/dashboard/{uuid}/dashcard/{dashcard-id}/execute": {
            "get": {
                "description": "Fetches the values for filling in execution parameters. Pass PK parameters and values to select.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/public/dashboard/{uuid}/dashcard/{dashcard-id}/execute",
                "tags": [
                    "/api/public"
                ]
            },
            "post": {
                "description": "Execute the associated Action in the context of a `Dashboard` and `DashboardCard` that includes it.\n\n   `parameters` should be the mapped dashboard parameters with values.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "parameters": {
                                        "additionalProperties": {},
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/public/dashboard/{uuid}/dashcard/{dashcard-id}/execute",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/dashboard/{uuid}/field/{field-id}/remapping/{remapped-id}": {
            "get": {
                "description": "Fetch remapped Field values. This is the same as `GET /api/field/:id/remapping/:remapped-id`, but for use with public\n  Dashboards.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "remapped-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "value",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/public/dashboard/{uuid}/field/{field-id}/remapping/{remapped-id}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/dashboard/{uuid}/field/{field-id}/search/{search-field-id}": {
            "get": {
                "description": "Search for values of a Field that is referenced by a Card in a public Dashboard.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "search-field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "value",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/public/dashboard/{uuid}/field/{field-id}/search/{search-field-id}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/dashboard/{uuid}/field/{field-id}/values": {
            "get": {
                "description": "Fetch FieldValues for a Field that is referenced by a Card in a public Dashboard.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "field-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/public/dashboard/{uuid}/field/{field-id}/values",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/dashboard/{uuid}/params/{param-key}/search/{query}": {
            "get": {
                "description": "Fetch filter values for dashboard parameter `param-key`, containing specified `query`.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "param-key",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/public/dashboard/{uuid}/params/{param-key}/search/{query}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/dashboard/{uuid}/params/{param-key}/values": {
            "get": {
                "description": "Fetch filter values for dashboard parameter `param-key`.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "param-key",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/public/dashboard/{uuid}/params/{param-key}/values",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/oembed": {
            "get": {
                "description": "oEmbed endpoint used to retrieve embed code and metadata for a (public) Metabase URL.",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "The format param is not used by the API, but is required as part of the oEmbed spec: http://oembed.com/#section2 just return an error if `format` is specified and it's anything other than `json`.",
                        "in": "query",
                        "name": "format",
                        "required": false,
                        "schema": {
                            "enum": [
                                "json"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "maxheight",
                        "required": true,
                        "schema": {
                            "default": 800,
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "maxwidth",
                        "required": true,
                        "schema": {
                            "default": 1024,
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/public/oembed",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/pivot/card/{uuid}/query": {
            "get": {
                "description": "Fetch a publicly-accessible Card an return query results as well as `:card` information. Does not require auth\n   credentials. Public sharing must be enabled.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/public/pivot/card/{uuid}/query",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/pivot/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}": {
            "get": {
                "description": "Fetch the results for a Card in a publicly-accessible Dashboard. Does not require auth credentials. Public\n  sharing must be enabled.",
                "parameters": [
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/public/pivot/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/tiles/card/{uuid}/{zoom}/{x}/{y}/{lat-field}/{lon-field}": {
            "get": {
                "description": "Generates a single tile image for a publicly-accessible Card using the map visualization. Does not require auth\n  credentials. Public sharing must be enabled.",
                "parameters": [
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "zoom",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "x",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "y",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "lat-field",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                        }
                    },
                    {
                        "in": "path",
                        "name": "lon-field",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                        }
                    },
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/public/tiles/card/{uuid}/{zoom}/{x}/{y}/{lat-field}/{lon-field}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/public/tiles/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}/{zoom}/{x}/{y}/{lat-field}/{lon-field}": {
            "get": {
                "description": "Generates a single tile image for a Card using the map visualization in a publicly-accessible Dashboard. Does not\n  require auth credentials. Public sharing must be enabled.",
                "parameters": [
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "zoom",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "x",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "y",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "lat-field",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                        }
                    },
                    {
                        "in": "path",
                        "name": "lon-field",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                        }
                    },
                    {
                        "description": "value must be a valid UUID.",
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/public/tiles/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}/{zoom}/{x}/{y}/{lat-field}/{lon-field}",
                "tags": [
                    "/api/public"
                ]
            }
        },
        "/api/pulse/": {
            "get": {
                "description": "Fetch all dashboard subscriptions. By default, returns only subscriptions for which the current user has write\n  permissions. For admins, this is all subscriptions; for non-admins, it is only subscriptions that they created.\n\n  If `dashboard_id` is specified, restricts results to subscriptions for that dashboard.\n\n  If `created_or_receive` is `true`, it specifically returns all subscriptions for which the current user\n  created *or* is a known recipient of. Note that this is a superset of the default items returned for non-admins,\n  and a subset of the default items returned for admins. This is used to power the /account/notifications page.\n  This may include subscriptions which the current user does not have collection permissions for, in which case\n  some sensitive metadata (the list of cards and recipients) is stripped out.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "archived",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "dashboard_id",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "creator_or_recipient",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/pulse/",
                "tags": [
                    "/api/pulse"
                ]
            },
            "post": {
                "description": "Create a new `Pulse`.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "cards": {},
                                    "channels": {},
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "collection_position": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "dashboard_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "parameters": {
                                        "items": {
                                            "properties": {},
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "skip_if_empty": {
                                        "default": false,
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "name",
                                    "cards",
                                    "channels"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/pulse/",
                "tags": [
                    "/api/pulse"
                ]
            }
        },
        "/api/pulse/{id}": {
            "get": {
                "description": "Fetch `Pulse` with ID. If the user is a recipient of the Pulse but does not have read permissions for its collection,\n  we still return it but with some sensitive metadata removed.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/pulse/{id}",
                "tags": [
                    "/api/pulse"
                ]
            },
            "put": {
                "description": "Update a Pulse with `id`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "archived": {
                                        "default": false,
                                        "type": "boolean"
                                    },
                                    "cards": {},
                                    "channels": {},
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "parameters": {
                                        "items": {
                                            "description": "Value must be a map.",
                                            "properties": {},
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "skip_if_empty": {
                                        "default": false,
                                        "type": "boolean"
                                    }
                                },
                                "required": [],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/pulse/{id}",
                "tags": [
                    "/api/pulse"
                ]
            }
        },
        "/api/pulse/{id}/subscription": {
            "delete": {
                "description": "For users to unsubscribe themselves from a pulse subscription.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/pulse/{id}/subscription",
                "tags": [
                    "/api/pulse"
                ]
            }
        },
        "/api/pulse/form_input": {
            "get": {
                "description": "Provides relevant configuration information and user choices for creating/updating Pulses.",
                "parameters": [],
                "summary": "GET /api/pulse/form_input",
                "tags": [
                    "/api/pulse"
                ]
            }
        },
        "/api/pulse/preview_card_info/{id}": {
            "get": {
                "description": "Get JSON object containing HTML rendering of a Card with `id` and other information.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/pulse/preview_card_info/{id}",
                "tags": [
                    "/api/pulse"
                ]
            }
        },
        "/api/pulse/preview_card_png/{id}": {
            "get": {
                "description": "Get PNG rendering of a Card with `id`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/pulse/preview_card_png/{id}",
                "tags": [
                    "/api/pulse"
                ]
            }
        },
        "/api/pulse/preview_card/{id}": {
            "get": {
                "description": "Get HTML rendering of a Card with `id`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/pulse/preview_card/{id}",
                "tags": [
                    "/api/pulse"
                ]
            }
        },
        "/api/pulse/preview_dashboard/{id}": {
            "get": {
                "description": "Get HTML rendering of a Dashboard with `id`.\n\n  This endpoint relies on a custom middleware defined in `metabase.channel.render.core/style-tag-nonce-middleware` to\n  allow the style tag to render properly, given our Content Security Policy setup. This middleware is attached to these\n  routes at the bottom of this namespace using `metabase.api.common/define-routes`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/pulse/preview_dashboard/{id}",
                "tags": [
                    "/api/pulse"
                ]
            }
        },
        "/api/pulse/test": {
            "post": {
                "description": "Test send an unsaved pulse.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "cards": {},
                                    "channels": {},
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "collection_position": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "dashboard_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "skip_if_empty": {
                                        "default": false,
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "name",
                                    "cards",
                                    "channels"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/pulse/test",
                "tags": [
                    "/api/pulse"
                ]
            }
        },
        "/api/pulse/unsubscribe/": {
            "post": {
                "description": "Allow non-users to unsubscribe from pulses/subscriptions, with the hash given through email.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "type": "string"
                                    },
                                    "hash": {
                                        "type": "string"
                                    },
                                    "pulse-id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "pulse-id",
                                    "email",
                                    "hash"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/pulse/unsubscribe/",
                "tags": [
                    "/api/pulse/unsubscribe"
                ]
            }
        },
        "/api/pulse/unsubscribe/undo": {
            "post": {
                "description": "Allow non-users to undo an unsubscribe from pulses/subscriptions, with the hash given through email.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "type": "string"
                                    },
                                    "hash": {
                                        "type": "string"
                                    },
                                    "pulse-id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "pulse-id",
                                    "email",
                                    "hash"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/pulse/unsubscribe/undo",
                "tags": [
                    "/api/pulse/unsubscribe"
                ]
            }
        },
        "/api/revision/": {
            "get": {
                "description": "Get revisions of an object.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "card",
                                "dashboard",
                                "segment"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/revision/",
                "tags": [
                    "/api/revision"
                ]
            }
        },
        "/api/revision/{entity}/{id}": {
            "get": {
                "description": "Fetch `Revisions` for an object with ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "entity",
                        "required": true,
                        "schema": {
                            "enum": [
                                "card",
                                "dashboard",
                                "segment"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/revision/{entity}/{id}",
                "tags": [
                    "/api/revision"
                ]
            }
        },
        "/api/revision/revert": {
            "post": {
                "description": "Revert an object to a prior revision.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "entity": {
                                        "enum": [
                                            "card",
                                            "dashboard",
                                            "segment"
                                        ],
                                        "type": "string"
                                    },
                                    "id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "revision_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "id",
                                    "entity",
                                    "revision_id"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/revision/revert",
                "tags": [
                    "/api/revision"
                ]
            }
        },
        "/api/search/": {
            "get": {
                "description": "Search for items in Metabase.\n  For the list of supported models, check [[metabase.search.config/all-models]].\n\n  Filters:\n  - `archived`: set to true to search archived items only, default is false\n  - `table_db_id`: search for tables, cards, and models of a certain DB\n  - `models`: only search for items of specific models. If not provided, search for all models\n  - `filters_items_in_personal_collection`: only search for items in personal collections\n  - `created_at`: search for items created at a specific timestamp\n  - `created_by`: search for items created by a specific user\n  - `last_edited_at`: search for items last edited at a specific timestamp\n  - `last_edited_by`: search for items last edited by a specific user\n  - `search_native_query`: set to true to search the content of native queries\n  - `verified`: set to true to search for verified items only (requires Content Management or Official Collections premium feature)\n  - `ids`: search for items with those ids, works iff single value passed to `models`\n\n  Note that not all item types support all filters, and the results will include only models that support the provided filters. For example:\n  - The `created-by` filter supports dashboards, models, actions, and cards.\n  - The `verified` filter supports models and cards.\n\n  A search query that has both filters applied will only return models and cards.",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "q",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "context",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "archived",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "table_db_id",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "models",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "dashboard",
                                    "table",
                                    "dataset",
                                    "segment",
                                    "collection",
                                    "database",
                                    "action",
                                    "indexed-entity",
                                    "metric",
                                    "card"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "in": "query",
                        "name": "filter_items_in_personal_collection",
                        "required": false,
                        "schema": {
                            "enum": [
                                "all",
                                "only",
                                "only-mine",
                                "exclude",
                                "exclude-others"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "created_at",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "created_by",
                        "required": false,
                        "schema": {
                            "items": {
                                "description": "value must be an integer greater than zero.",
                                "minimum": 1,
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "last_edited_at",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "last_edited_by",
                        "required": false,
                        "schema": {
                            "items": {
                                "description": "value must be an integer greater than zero.",
                                "minimum": 1,
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "in": "query",
                        "name": "model_ancestors",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "search_engine",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "search_native_query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "ids",
                        "required": false,
                        "schema": {
                            "items": {
                                "description": "value must be an integer greater than zero.",
                                "minimum": 1,
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "in": "query",
                        "name": "calculate_available_models",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_dashboard_questions",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/search/",
                "tags": [
                    "/api/search"
                ]
            }
        },
        "/api/search/force-reindex": {
            "post": {
                "description": "This will trigger an immediate reindexing, if we are using search index.",
                "parameters": [],
                "summary": "POST /api/search/force-reindex",
                "tags": [
                    "/api/search"
                ]
            }
        },
        "/api/search/re-init": {
            "post": {
                "description": "This will blow away any search indexes, re-create, and re-populate them.",
                "parameters": [],
                "summary": "POST /api/search/re-init",
                "tags": [
                    "/api/search"
                ]
            }
        },
        "/api/search/weights": {
            "get": {
                "description": "Return the current weights being used to rank the search results",
                "parameters": [
                    {
                        "in": "query",
                        "name": "context",
                        "required": true,
                        "schema": {
                            "default": "default",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "search_engine",
                        "required": false,
                        "schema": {}
                    }
                ],
                "summary": "GET /api/search/weights",
                "tags": [
                    "/api/search"
                ]
            },
            "put": {
                "description": "Update the current weights being used to rank the search results",
                "parameters": [
                    {
                        "in": "query",
                        "name": "context",
                        "required": true,
                        "schema": {
                            "default": "default",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "search_engine",
                        "required": false,
                        "schema": {}
                    }
                ],
                "summary": "PUT /api/search/weights",
                "tags": [
                    "/api/search"
                ]
            }
        },
        "/api/segment/": {
            "get": {
                "description": "Fetch *all* `Segments`.",
                "parameters": [],
                "summary": "GET /api/segment/",
                "tags": [
                    "/api/segment"
                ]
            },
            "post": {
                "description": "Create a new `Segment`.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "definition": {
                                        "description": "Value must be a map.",
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "table_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "name",
                                    "table_id",
                                    "definition"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/segment/",
                "tags": [
                    "/api/segment"
                ]
            }
        },
        "/api/segment/{id}": {
            "delete": {
                "description": "Archive a Segment. (DEPRECATED -- Just pass updated value of `:archived` to the `PUT` endpoint instead.)",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "revision_message",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "DELETE /api/segment/{id}",
                "tags": [
                    "/api/segment"
                ]
            },
            "get": {
                "description": "Fetch `Segment` with ID.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/segment/{id}",
                "tags": [
                    "/api/segment"
                ]
            },
            "put": {
                "description": "Update a `Segment` with ID.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "archived": {
                                        "type": "boolean"
                                    },
                                    "caveats": {
                                        "type": "string"
                                    },
                                    "definition": {
                                        "properties": {},
                                        "type": "object"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "points_of_interest": {
                                        "type": "string"
                                    },
                                    "revision_message": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "show_in_getting_started": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "revision_message"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/segment/{id}",
                "tags": [
                    "/api/segment"
                ]
            }
        },
        "/api/segment/{id}/related": {
            "get": {
                "description": "Return related entities.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/segment/{id}/related",
                "tags": [
                    "/api/segment"
                ]
            }
        },
        "/api/session/": {
            "delete": {
                "description": "Logout.",
                "parameters": [],
                "summary": "DELETE /api/session/",
                "tags": [
                    "/api/session"
                ]
            },
            "post": {
                "description": "Login.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "password": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "username": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "required": [
                                    "username",
                                    "password"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/session/",
                "tags": [
                    "/api/session"
                ]
            }
        },
        "/api/session/forgot_password": {
            "post": {
                "description": "Send a reset email when user has forgotten their password.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "description": "value must be a valid email address.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "email"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/session/forgot_password",
                "tags": [
                    "/api/session"
                ]
            }
        },
        "/api/session/google_auth": {
            "post": {
                "description": "Login with Google Auth.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "token": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "required": [
                                    "token"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/session/google_auth",
                "tags": [
                    "/api/session"
                ]
            }
        },
        "/api/session/password_reset_token_valid": {
            "get": {
                "description": "Check if a password reset token is valid and isn't expired.",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/session/password_reset_token_valid",
                "tags": [
                    "/api/session"
                ]
            }
        },
        "/api/session/properties": {
            "get": {
                "description": "Get all properties and their values. These are the specific `Settings` that are readable by the current user, or are\n  public if no user is logged in.",
                "parameters": [],
                "summary": "GET /api/session/properties",
                "tags": [
                    "/api/session"
                ]
            }
        },
        "/api/session/reset_password": {
            "post": {
                "description": "Reset password with a reset token.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "password": {
                                        "description": "password is too common.",
                                        "type": "string"
                                    },
                                    "token": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "required": [
                                    "token",
                                    "password"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/session/reset_password",
                "tags": [
                    "/api/session"
                ]
            }
        },
        "/api/setting/": {
            "get": {
                "description": "Get all `Settings` and their values. You must be a superuser or have `setting` permission to do this.\n  For non-superusers, a list of visible settings and values can be retrieved using the /api/session/properties endpoint.",
                "parameters": [],
                "summary": "GET /api/setting/",
                "tags": [
                    "/api/setting"
                ]
            },
            "put": {
                "description": "Update multiple `Settings` values. If called by a non-superuser, only user-local settings can be updated.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "additionalProperties": {},
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/setting/",
                "tags": [
                    "/api/setting"
                ]
            }
        },
        "/api/setting/{key}": {
            "get": {
                "description": "Fetch a single `Setting`.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/setting/{key}",
                "tags": [
                    "/api/setting"
                ]
            },
            "put": {
                "description": "Create/update a `Setting`. If called by a non-admin, only user-local settings can be updated.\n   This endpoint can also be used to delete Settings by passing `nil` for `:value`.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "PUT /api/setting/{key}",
                "tags": [
                    "/api/setting"
                ]
            }
        },
        "/api/setup/": {
            "post": {
                "description": "Special endpoint for creating the first user during setup. This endpoint both creates the user AND logs them in and\n  returns a session ID. This endpoint can also be used to add a database, create and invite a second admin, and/or\n  set specific settings from the setup flow.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "invite": {
                                        "properties": {
                                            "email": {
                                                "description": "value must be a valid email address.",
                                                "type": "string"
                                            },
                                            "first_name": {
                                                "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                "description": "value must be a non-blank string."
                                            },
                                            "last_name": {
                                                "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                "description": "value must be a non-blank string."
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "prefs": {
                                        "properties": {
                                            "site_locale": {
                                                "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                "description": "value must be a non-blank string."
                                            },
                                            "site_name": {
                                                "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                "description": "value must be a non-blank string."
                                            }
                                        },
                                        "required": [
                                            "site_name"
                                        ],
                                        "type": "object"
                                    },
                                    "token": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "user": {
                                        "properties": {
                                            "email": {
                                                "description": "value must be a valid email address.",
                                                "type": "string"
                                            },
                                            "first_name": {
                                                "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                "description": "value must be a non-blank string."
                                            },
                                            "last_name": {
                                                "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                                "description": "value must be a non-blank string."
                                            },
                                            "password": {
                                                "description": "password is too common.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "email",
                                            "password"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "token",
                                    "user",
                                    "prefs"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/setup/",
                "tags": [
                    "/api/setup"
                ]
            }
        },
        "/api/setup/user_defaults": {
            "get": {
                "description": "Returns object containing default user details for initial setup, if configured,\n   and if the provided token value matches the token in the configuration value.",
                "parameters": [],
                "summary": "GET /api/setup/user_defaults",
                "tags": [
                    "/api/setup"
                ]
            }
        },
        "/api/slack/bug-report": {
            "post": {
                "description": "Send diagnostic information to the configured Slack channels.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "diagnosticInfo": {
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "diagnosticInfo"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/slack/bug-report",
                "tags": [
                    "/api/slack"
                ]
            }
        },
        "/api/slack/manifest": {
            "get": {
                "description": "Returns the YAML manifest file that should be used to bootstrap new Slack apps",
                "parameters": [],
                "summary": "GET /api/slack/manifest",
                "tags": [
                    "/api/slack"
                ]
            }
        },
        "/api/slack/settings": {
            "put": {
                "description": "Update Slack related settings. You must be a superuser to do this. Also updates the slack-cache.\n  There are 3 cases where we alter the slack channel/user cache:\n  1. falsy token           -> clear\n  2. invalid token         -> clear\n  3. truthy, valid token   -> refresh ",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "slack-app-token": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "slack-bug-report-channel": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/slack/settings",
                "tags": [
                    "/api/slack"
                ]
            }
        },
        "/api/table/": {
            "get": {
                "description": "Get all `Tables`.",
                "parameters": [],
                "summary": "GET /api/table/",
                "tags": [
                    "/api/table"
                ]
            },
            "put": {
                "description": "Update all `Table` in `ids`.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "caveats": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "display_name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "entity_type": {
                                        "description": "value must be a valid entity type (keyword or string)."
                                    },
                                    "ids": {
                                        "items": {
                                            "description": "value must be an integer greater than zero.",
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "points_of_interest": {
                                        "type": "string"
                                    },
                                    "show_in_getting_started": {
                                        "type": "boolean"
                                    },
                                    "visibility_type": {
                                        "enum": [
                                            "technical",
                                            "hidden",
                                            "cruft"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "ids"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/table/",
                "tags": [
                    "/api/table"
                ]
            }
        },
        "/api/table/{id}": {
            "get": {
                "description": "Get `Table` with ID.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_editable_data_model",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/table/{id}",
                "tags": [
                    "/api/table"
                ]
            },
            "put": {
                "description": "Update `Table` with ID.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "caveats": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "display_name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "entity_type": {
                                        "description": "value must be a valid entity type (keyword or string)."
                                    },
                                    "field_order": {
                                        "enum": [
                                            "alphabetical",
                                            "custom",
                                            "database",
                                            "smart"
                                        ],
                                        "type": "string"
                                    },
                                    "points_of_interest": {
                                        "type": "string"
                                    },
                                    "show_in_getting_started": {
                                        "type": "boolean"
                                    },
                                    "visibility_type": {
                                        "enum": [
                                            "technical",
                                            "hidden",
                                            "cruft"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/table/{id}",
                "tags": [
                    "/api/table"
                ]
            }
        },
        "/api/table/{id}/append-csv": {
            "post": {
                "description": "Inserts the rows of an uploaded CSV file into the table identified by `:id`. The table must have been created by\n  uploading a CSV file.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "file": {
                                        "properties": {
                                            "filename": {
                                                "type": "string"
                                            },
                                            "tempfile": {}
                                        },
                                        "required": [
                                            "filename",
                                            "tempfile"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "file"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/table/{id}/append-csv",
                "tags": [
                    "/api/table"
                ]
            }
        },
        "/api/table/{id}/discard_values": {
            "post": {
                "description": "Discard the FieldValues belonging to the Fields in this Table. Only applies to fields that have FieldValues. If\n   this Table's Database is set up to automatically sync FieldValues, they will be recreated during the next cycle.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/table/{id}/discard_values",
                "tags": [
                    "/api/table"
                ]
            }
        },
        "/api/table/{id}/fields/order": {
            "put": {
                "description": "Reorder fields",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "description": "value must be an integer greater than zero.",
                                    "minimum": 1,
                                    "type": "integer"
                                },
                                "type": "array"
                            }
                        }
                    }
                },
                "summary": "PUT /api/table/{id}/fields/order",
                "tags": [
                    "/api/table"
                ]
            }
        },
        "/api/table/{id}/fks": {
            "get": {
                "description": "Get all foreign keys whose destination is a `Field` that belongs to this `Table`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/table/{id}/fks",
                "tags": [
                    "/api/table"
                ]
            }
        },
        "/api/table/{id}/query_metadata": {
            "get": {
                "description": "Get metadata about a `Table` useful for running queries.\n   Returns DB, fields, field FKs, and field values.\n\n   Passing `include_hidden_fields=true` will include any hidden `Fields` in the response. Defaults to `false`\n   Passing `include_sensitive_fields=true` will include any sensitive `Fields` in the response. Defaults to `false`.\n\n   Passing `include_editable_data_model=true` will check that the current user has write permissions for the table's\n   data model, while `false` checks that they have data access perms for the table. Defaults to `false`.\n\n   These options are provided for use in the Admin Edit Metadata page.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_sensitive_fields",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_hidden_fields",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_editable_data_model",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/table/{id}/query_metadata",
                "tags": [
                    "/api/table"
                ]
            }
        },
        "/api/table/{id}/related": {
            "get": {
                "description": "Return related entities.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/table/{id}/related",
                "tags": [
                    "/api/table"
                ]
            }
        },
        "/api/table/{id}/replace-csv": {
            "post": {
                "description": "Replaces the contents of the table identified by `:id` with the rows of an uploaded CSV file. The table must have\n  been created by uploading a CSV file.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "file": {
                                        "properties": {
                                            "filename": {
                                                "type": "string"
                                            },
                                            "tempfile": {}
                                        },
                                        "required": [
                                            "filename",
                                            "tempfile"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "file"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/table/{id}/replace-csv",
                "tags": [
                    "/api/table"
                ]
            }
        },
        "/api/table/{id}/rescan_values": {
            "post": {
                "description": "Manually trigger an update for the FieldValues for the Fields belonging to this Table. Only applies to Fields that\n   are eligible for FieldValues.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "POST /api/table/{id}/rescan_values",
                "tags": [
                    "/api/table"
                ]
            }
        },
        "/api/table/{table-id}/data": {
            "get": {
                "description": "Get the data for the given table",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "table-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/table/{table-id}/data",
                "tags": [
                    "/api/table"
                ]
            }
        },
        "/api/table/card__:id/fks": {
            "get": {
                "description": "Return FK info for the 'virtual' table for a Card. This is always empty, so this endpoint\n   serves mainly as a placeholder to avoid having to change anything on the frontend.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/table/card__:id/fks",
                "tags": [
                    "/api/table"
                ]
            }
        },
        "/api/table/card__:id/query_metadata": {
            "get": {
                "description": "Return metadata for the 'virtual' table for a Card.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/table/card__:id/query_metadata",
                "tags": [
                    "/api/table"
                ]
            }
        },
        "/api/task/": {
            "get": {
                "description": "Fetch a list of recent tasks stored as Task History",
                "parameters": [],
                "summary": "GET /api/task/",
                "tags": [
                    "/api/task"
                ]
            }
        },
        "/api/task/{id}": {
            "get": {
                "description": "Get `TaskHistory` entry with ID.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/task/{id}",
                "tags": [
                    "/api/task"
                ]
            }
        },
        "/api/task/info": {
            "get": {
                "description": "Return raw data about all scheduled tasks (i.e., Quartz Jobs and Triggers).",
                "parameters": [],
                "summary": "GET /api/task/info",
                "tags": [
                    "/api/task"
                ]
            }
        },
        "/api/tiles/{card-id}/{zoom}/{x}/{y}/{lat-field}/{lon-field}": {
            "get": {
                "description": "Generates a single tile image for a saved Card.",
                "parameters": [
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "zoom",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "x",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "y",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "lat-field",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                        }
                    },
                    {
                        "in": "path",
                        "name": "lon-field",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/tiles/{card-id}/{zoom}/{x}/{y}/{lat-field}/{lon-field}",
                "tags": [
                    "/api/tiles"
                ]
            }
        },
        "/api/tiles/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/{zoom}/{x}/{y}/{lat-field}/{lon-field}": {
            "get": {
                "description": "Generates a single tile image for a dashcard.",
                "parameters": [
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "zoom",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "x",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer.",
                        "in": "path",
                        "name": "y",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "lat-field",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                        }
                    },
                    {
                        "in": "path",
                        "name": "lon-field",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/api.tiles~1field-id-or-name"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashboard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "dashcard-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "card-id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/tiles/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/{zoom}/{x}/{y}/{lat-field}/{lon-field}",
                "tags": [
                    "/api/tiles"
                ]
            }
        },
        "/api/tiles/{zoom}/{x}/{y}/{lat-field}/{lon-field}": {
            "get": {
                "description": "Generates a single tile image for an ad-hoc query.",
                "parameters": [
                    {
                        "description": "value must be a valid JSON string.",
                        "in": "query",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/tiles/{zoom}/{x}/{y}/{lat-field}/{lon-field}",
                "tags": [
                    "/api/tiles"
                ]
            }
        },
        "/api/timeline-event/": {
            "post": {
                "description": "Create a new [[TimelineEvent]].",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "archived": {
                                        "type": "boolean"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "icon": {
                                        "enum": [
                                            "star",
                                            "cake",
                                            "mail",
                                            "warning",
                                            "bell",
                                            "cloud"
                                        ],
                                        "type": "string"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "question_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "source": {
                                        "enum": [
                                            "collections",
                                            "question"
                                        ],
                                        "type": "string"
                                    },
                                    "time_matters": {
                                        "type": "boolean"
                                    },
                                    "timeline_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "timestamp": {
                                        "description": "value must be a valid date string",
                                        "type": "string"
                                    },
                                    "timezone": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "timestamp",
                                    "timezone",
                                    "timeline_id"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/timeline-event/",
                "tags": [
                    "/api/timeline-event"
                ]
            }
        },
        "/api/timeline-event/{id}": {
            "delete": {
                "description": "Delete a [[TimelineEvent]].",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/timeline-event/{id}",
                "tags": [
                    "/api/timeline-event"
                ]
            },
            "get": {
                "description": "Fetch the [[TimelineEvent]] with `id`.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/timeline-event/{id}",
                "tags": [
                    "/api/timeline-event"
                ]
            },
            "put": {
                "description": "Update a [[TimelineEvent]].",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "archived": {
                                        "type": "boolean"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "icon": {
                                        "enum": [
                                            "star",
                                            "cake",
                                            "mail",
                                            "warning",
                                            "bell",
                                            "cloud"
                                        ],
                                        "type": "string"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "time_matters": {
                                        "type": "boolean"
                                    },
                                    "timeline_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "timestamp": {
                                        "description": "value must be a valid date string",
                                        "type": "string"
                                    },
                                    "timezone": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/timeline-event/{id}",
                "tags": [
                    "/api/timeline-event"
                ]
            }
        },
        "/api/timeline/": {
            "get": {
                "description": "Fetch a list of `Timeline`s. Can include `archived=true` to return archived timelines.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.timeline.api.timeline~1include"
                        }
                    },
                    {
                        "in": "query",
                        "name": "archived",
                        "required": true,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/timeline/",
                "tags": [
                    "/api/timeline"
                ]
            },
            "post": {
                "description": "Create a new [[Timeline]].",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "archived": {
                                        "type": "boolean"
                                    },
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "default": {
                                        "type": "boolean"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "icon": {
                                        "enum": [
                                            "star",
                                            "cake",
                                            "mail",
                                            "warning",
                                            "bell",
                                            "cloud"
                                        ],
                                        "type": "string"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/timeline/",
                "tags": [
                    "/api/timeline"
                ]
            }
        },
        "/api/timeline/{id}": {
            "delete": {
                "description": "Delete a [[Timeline]]. Will cascade delete its events as well.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/timeline/{id}",
                "tags": [
                    "/api/timeline"
                ]
            },
            "get": {
                "description": "Fetch the `Timeline` with `id`. Include `include=events` to unarchived events included on the timeline. Add\n  `archived=true` to return all events on the timeline, both archived and unarchived.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.timeline.api.timeline~1include"
                        }
                    },
                    {
                        "in": "query",
                        "name": "archived",
                        "required": true,
                        "schema": {
                            "default": "false",
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "value must be a valid date string",
                        "in": "query",
                        "name": "start",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be a valid date string",
                        "in": "query",
                        "name": "end",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "GET /api/timeline/{id}",
                "tags": [
                    "/api/timeline"
                ]
            },
            "put": {
                "description": "Update the [[Timeline]] with `id`. Returns the timeline without events. Archiving a timeline will archive all of the\n  events in that timeline.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "archived": {
                                        "type": "boolean"
                                    },
                                    "collection_id": {
                                        "description": "value must be an integer greater than zero.",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "default": {
                                        "type": "boolean"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "icon": {
                                        "enum": [
                                            "star",
                                            "cake",
                                            "mail",
                                            "warning",
                                            "bell",
                                            "cloud"
                                        ],
                                        "type": "string"
                                    },
                                    "name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/timeline/{id}",
                "tags": [
                    "/api/timeline"
                ]
            }
        },
        "/api/timeline/collection/{id}": {
            "get": {
                "description": "Fetch a specific Collection's timelines.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "schema": {
                            "const": "events"
                        }
                    },
                    {
                        "in": "query",
                        "name": "archived",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/timeline/collection/{id}",
                "tags": [
                    "/api/timeline"
                ]
            }
        },
        "/api/timeline/collection/root": {
            "get": {
                "description": "Fetch the root Collection's timelines.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "schema": {
                            "const": "events"
                        }
                    },
                    {
                        "in": "query",
                        "name": "archived",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/timeline/collection/root",
                "tags": [
                    "/api/timeline"
                ]
            }
        },
        "/api/user-key-value/namespace/{namespace}": {
            "get": {
                "description": "Returns all KV pairs in a given namespace for the current user",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "namespace",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/user-key-value/namespace/{namespace}",
                "tags": [
                    "/api/user-key-value"
                ]
            }
        },
        "/api/user-key-value/namespace/{namespace}/key/{key}": {
            "delete": {
                "description": "Deletes a KV-pair for the user",
                "parameters": [],
                "summary": "DELETE /api/user-key-value/namespace/{namespace}/key/{key}",
                "tags": [
                    "/api/user-key-value"
                ]
            },
            "get": {
                "description": "Get a value for the user",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "key",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "namespace",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "summary": "GET /api/user-key-value/namespace/{namespace}/key/{key}",
                "tags": [
                    "/api/user-key-value"
                ]
            },
            "put": {
                "description": "Upsert a KV-pair for the user",
                "parameters": [
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "key",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    },
                    {
                        "description": "value must be a non-blank string.",
                        "in": "path",
                        "name": "namespace",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "expires_at": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.literal~1string.datetime"
                                    },
                                    "value": {}
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/user-key-value/namespace/{namespace}/key/{key}",
                "tags": [
                    "/api/user-key-value"
                ]
            }
        },
        "/api/user/": {
            "get": {
                "description": "Fetch a list of `Users` for admins or group managers.\n  By default returns only active users for admins and only active users within groups that the group manager is managing for group managers.\n\n   - If `status` is `deactivated`, include deactivated users only.\n   - If `status` is `all`, include all users (active and inactive).\n   - Also supports `include_deactivated`, which if true, is equivalent to `status=all`; If is false, is equivalent to `status=active`.\n   `status` and `include_deactivated` requires superuser permissions.\n   - `include_deactivated` is a legacy alias for `status` and will be removed in a future release, users are advised to use `status` for better support and flexibility.\n   If both params are passed, `status` takes precedence.\n\n  For users with segmented permissions, return only themselves.\n\n  Takes `limit`, `offset` for pagination.\n  Takes `query` for filtering on first name, last name, email.\n  Also takes `group_id`, which filters on group id.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "query",
                        "name": "group_id",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_deactivated",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "GET /api/user/",
                "tags": [
                    "/api/user"
                ]
            },
            "post": {
                "description": "Create a new `User`, return a 400 if the email address is already taken",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "description": "value must be a valid email address.",
                                        "type": "string"
                                    },
                                    "first_name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "last_name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "login_attributes": {
                                        "additionalProperties": {},
                                        "description": "login attribute keys must be a keyword or string",
                                        "type": "object"
                                    },
                                    "user_group_memberships": {
                                        "items": {
                                            "$ref": "#/components/schemas/metabase.api.user~1user-group-membership"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "email"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/user/",
                "tags": [
                    "/api/user"
                ]
            }
        },
        "/api/user/{id}": {
            "delete": {
                "description": "Disable a `User`.  This does not remove the `User` from the DB, but instead disables their account.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "DELETE /api/user/{id}",
                "tags": [
                    "/api/user"
                ]
            },
            "get": {
                "description": "Fetch a `User`. You must be fetching yourself *or* be a superuser *or* a Group Manager.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "GET /api/user/{id}",
                "tags": [
                    "/api/user"
                ]
            },
            "put": {
                "description": "Update an existing, active `User`.\n  Self or superusers can update user info and groups.\n  Group Managers can only add/remove users from groups they are manager of.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "description": "value must be a valid email address.",
                                        "type": "string"
                                    },
                                    "first_name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "is_group_manager": {
                                        "type": "boolean"
                                    },
                                    "is_superuser": {
                                        "type": "boolean"
                                    },
                                    "last_name": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "locale": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "login_attributes": {
                                        "additionalProperties": {},
                                        "description": "login attribute keys must be a keyword or string",
                                        "type": "object"
                                    },
                                    "user_group_memberships": {
                                        "items": {
                                            "$ref": "#/components/schemas/metabase.api.user~1user-group-membership"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/user/{id}",
                "tags": [
                    "/api/user"
                ]
            }
        },
        "/api/user/{id}/modal/{modal}": {
            "put": {
                "description": "Indicate that a user has been informed about the vast intricacies of 'the' Query Builder.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "PUT /api/user/{id}/modal/{modal}",
                "tags": [
                    "/api/user"
                ]
            }
        },
        "/api/user/{id}/password": {
            "put": {
                "description": "Update a user's password.",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "password": {
                                        "description": "password is too common.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "password"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "PUT /api/user/{id}/password",
                "tags": [
                    "/api/user"
                ]
            }
        },
        "/api/user/{id}/reactivate": {
            "put": {
                "description": "Reactivate user at `:id`",
                "parameters": [
                    {
                        "description": "value must be an integer greater than zero.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "summary": "PUT /api/user/{id}/reactivate",
                "tags": [
                    "/api/user"
                ]
            }
        },
        "/api/user/current": {
            "get": {
                "description": "Fetch the current `User`.",
                "parameters": [],
                "summary": "GET /api/user/current",
                "tags": [
                    "/api/user"
                ]
            }
        },
        "/api/user/recipients": {
            "get": {
                "description": "Fetch a list of `Users`. Returns only active users. Meant for non-admins unlike GET /api/user.\n\n   - If user-visibility is :all or the user is an admin, include all users.\n   - If user-visibility is :group, include only users in the same group (excluding the all users group).\n   - If user-visibility is :none or the user is sandboxed, include only themselves.",
                "parameters": [],
                "summary": "GET /api/user/recipients",
                "tags": [
                    "/api/user"
                ]
            }
        },
        "/api/util/bug_report_details": {
            "get": {
                "description": "Returns version and system information relevant to filing a bug report against Metabase.",
                "parameters": [],
                "summary": "GET /api/util/bug_report_details",
                "tags": [
                    "/api/util"
                ]
            }
        },
        "/api/util/diagnostic_info/connection_pool_info": {
            "get": {
                "description": "Returns database connection pool info for the current Metabase instance.",
                "parameters": [],
                "summary": "GET /api/util/diagnostic_info/connection_pool_info",
                "tags": [
                    "/api/util"
                ]
            }
        },
        "/api/util/entity_id": {
            "post": {
                "description": "Translate entity IDs to model IDs.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "entity_ids": {
                                        "properties": {},
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "entity_ids"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/util/entity_id",
                "tags": [
                    "/api/util"
                ]
            }
        },
        "/api/util/logs": {
            "get": {
                "description": "Logs.",
                "parameters": [],
                "summary": "GET /api/util/logs",
                "tags": [
                    "/api/util"
                ]
            }
        },
        "/api/util/password_check": {
            "post": {
                "description": "Endpoint that checks if the supplied password meets the currently configured password complexity rules.",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "password": {
                                        "description": "password is too common.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "password"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/util/password_check",
                "tags": [
                    "/api/util"
                ]
            }
        },
        "/api/util/product-feedback": {
            "post": {
                "description": "Endpoint to provide feedback from the product",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "comments": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "email": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    },
                                    "source": {
                                        "$ref": "#/components/schemas/metabase.lib.schema.common~1non-blank-string",
                                        "description": "value must be a non-blank string."
                                    }
                                },
                                "required": [
                                    "source"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "POST /api/util/product-feedback",
                "tags": [
                    "/api/util"
                ]
            }
        },
        "/api/util/random_token": {
            "get": {
                "description": "Return a cryptographically secure random 32-byte token, encoded as a hexadecimal string.\n   Intended for use when creating a value for `embedding-secret-key`.",
                "parameters": [],
                "summary": "GET /api/util/random_token",
                "tags": [
                    "/api/util"
                ]
            }
        },
        "/api/util/stats": {
            "get": {
                "description": "Anonymous usage stats. Endpoint for testing, and eventually exposing this to instance admins to let them see\n  what is being phoned home.",
                "parameters": [],
                "summary": "GET /api/util/stats",
                "tags": [
                    "/api/util"
                ]
            }
        }
    },
    "servers": [
        {
            "description": "Metabase API",
            "url": ""
        }
    ]
}